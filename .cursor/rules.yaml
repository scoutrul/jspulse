# Правила и контекст для AI-ассистента в проекте JS Пульс

# Основные инструкции, которым нужно следовать всегда.
Always:
  - |
    - Используй ТОЛЬКО `pnpm` как пакетный менеджер (версия 8.x).
    - Любое изменение, установка пакетов (`pnpm install`, `pnpm add`) или запуск скриптов (`pnpm run ...`) требуют явного предварительного согласования и одобрения.
    - Не оставляй закомментированный код.
    - Редактируй файлы только в стандартном редакторе кода.
    - Всегда сверяйся с полным `README.md` для получения наиболее актуальной и подробной информации о проекте, его структуре и процессах.
    - После рефакторинга или перемещения файлов/папок обязательно проверяй все импорты и ссылки на эти файлы во всем проекте и исправляй пути при необходимости.
    - На фронтенде используй axios для HTTP-запросов, на бэкенде - встроенный fetch.
    - Используй TypeScript для типизации кода.

# Правила работы с Git.
Gitflow:
  - |
    - Коммиты должны быть атомарными и логически разделенными.
    - Используй формат conventional commits: `feat:`, `fix:`, `docs:`, `refactor:`, `chore:`, `style:`, `test:`, `build:`, `ci:`.
    - Перед выполнением `git commit` или `git push` необходимо получить явное разрешение.
    - Соблюдай правила из `.gitignore` (не добавляй `node_modules`, `.env`, файлы IDE и т.д.).

# Руководство по стилю и структуре проекта.
Styleguide:
  - |
    - Используй русский язык во всех комментариях к коду и в сообщениях.
    - Соблюдай принятый в проекте стиль кода (форматирование, именование и т.д.).
    - Комментарии должны объяснять **ЗАЧЕМ** написан код (его цель, бизнес-логика) или **ПОЧЕМУ** выбрано нетривиальное решение, а **не КАК** он работает (это должно быть видно из самого кода).
    - Код должен стремиться быть самодокументируемым. Поясняй только **неочевидные** моменты.
    - Комментарии, раскрывающие смысл констант или "магических" значений (например, `// ID региона "Россия" на HH.ru`), **допустимы**.
    - **НЕ** оставляй комментарии-советы, предположения или объяснения очевидного (например, `// Используем константу`).
    - **НЕ** оставляй закомментированный код.

  - |
    Технологический стек:
      - Backend: Node.js (v18.x), Express, Mongoose, TypeScript
      - Frontend: SvelteKit, Vite (v5.x), TypeScript
      - Database: MongoDB (v7.x)
      - Containerization: Docker, Docker Compose (v3.x)
      - Package Manager: pnpm (v8.x)

  - |
    Структура проекта (основные директории):
      - `/backend`: API на Node.js/Express, модели Mongoose, роуты, сервисы.
      - `/frontend`: Интерфейс на SvelteKit, компоненты, страницы, сервисный слой.
      - `/shared`: Общий код (типы, константы) для backend и frontend.
        - Типы, используемые для обмена данными между frontend и backend (DTO - Data Transfer Objects), помещаются в `shared/types`.
        - Для имен интерфейсов DTO используется суффикс `DTO` (например, `VacancyDTO`).
        - Типы, специфичные для backend (например, связанные с Mongoose), остаются в `/backend`.
        - Типы, специфичные для frontend (например, пропсы компонентов), остаются в `/frontend`.
      - `/data`: Данные для Docker volumes (например, MongoDB).
      - `docker-compose.yml`: Конфигурация Docker.
      - `README.md`: Основная документация (всегда актуальна!).

  - |
    Ключевые команды для запуска и управления проектом:
      - Запуск всего стека (Docker): `docker-compose up --build -d`
      - Остановка стека: `docker-compose down`
      - Остановка с удалением томов: `docker-compose down -v`
      - Заполнение БД тестовыми данными: `docker-compose exec backend node data/seedDatabase.js`
      - Локальный запуск frontend (dev): `cd frontend && pnpm install && pnpm run dev`
      - Установка зависимостей: `pnpm install`

  - |
    Важное правило:
      - Перед тем, как ссылаться на файл или директорию в своих ответах или коде, всегда проверяй их реальное существование в проекте с помощью инструментов чтения или листинга директорий.