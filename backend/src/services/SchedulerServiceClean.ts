import cron from 'node-cron';
import { EventEmitter } from 'events';
import { ScheduledJob } from '../domain/entities/ScheduledJob.js';
import { SchedulerConfig } from '../domain/value-objects/SchedulerConfig.js';
import { GetSchedulerStatusUseCase } from '../application/use-cases/GetSchedulerStatusUseCase.js';

/**
 * üï∞Ô∏è SchedulerService —Å Clean Architecture
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã:
 * - Domain Entities –¥–ª—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
 * - Use Cases –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
 * - Value Objects –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 * - Event-driven –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
 */
export class SchedulerServiceClean extends EventEmitter {
  private jobs: Map<string, ScheduledJob> = new Map();
  private config: SchedulerConfig;
  private isShuttingDown: boolean = false;
  private startTime: number;

  constructor(config?: Partial<SchedulerConfig>) {
    super();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Value Object –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    this.config = config ? SchedulerConfig.createDefault().withUpdates(config) : SchedulerConfig.createDefault();
    this.startTime = Date.now();

    this.initializeJobs();
  }

  /**
   * üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
   */
  private initializeJobs(): void {
    // 1. HH Parser Job
    this.registerJob(new ScheduledJob(
      'hh-parser',
      'HeadHunter Vacancy Parser',
      this.config.hhParserSchedule,
      this.config.hhParserEnabled
    ));

    // 2. Database Cleanup Job
    this.registerJob(new ScheduledJob(
      'database-cleanup',
      'Database Cleanup',
      this.config.cleanupSchedule,
      this.config.cleanupEnabled
    ));

    // 3. Health Check Job
    this.registerJob(new ScheduledJob(
      'health-check',
      'System Health Check',
      this.config.healthCheckSchedule,
      this.config.healthCheckEnabled
    ));

    this.log('info', 'üèóÔ∏è Scheduler initialized with jobs:', Array.from(this.jobs.keys()));
  }

  /**
   * üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
   */
  private registerJob(job: ScheduledJob): void {
    if (job.enabled) {
      const cronJob = cron.schedule(job.schedule, async () => {
        await this.executeJob(job.id);
      }, {
        timezone: process.env.TZ || 'Europe/Moscow'
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º cron job –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º Map –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      this.cronJobs.set(job.id, cronJob);
    }

    this.jobs.set(job.id, job);
  }

  /**
   * ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ scheduler'–∞
   */
  public start(): void {
    if (this.isShuttingDown) {
      this.log('warn', '‚ö†Ô∏è Cannot start scheduler during shutdown');
      return;
    }

    for (const [jobId, job] of this.jobs) {
      if (job.enabled && this.cronJobs.has(jobId)) {
        this.cronJobs.get(jobId)!.start();
        this.log('info', `‚ñ∂Ô∏è Started job: ${job.name} (${job.schedule})`);
      }
    }

    this.log('info', 'üöÄ Scheduler started successfully');
    this.emit('started');
  }

  /**
   * ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ scheduler'–∞
   */
  public async stop(): Promise<void> {
    this.isShuttingDown = true;

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    const runningJobs = Array.from(this.jobs.values()).filter(job => job.running);
    if (runningJobs.length > 0) {
      this.log('info', `‚è≥ Waiting for ${runningJobs.length} running jobs to complete...`);

      let attempts = 0;
      while (runningJobs.some(job => job.running) && attempts < 60) {
        await new Promise(resolve => setTimeout(resolve, 1000));
        attempts++;
      }
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ cron jobs
    for (const [jobId, cronJob] of this.cronJobs) {
      cronJob.stop();
      this.log('info', `‚èπÔ∏è Stopped job: ${jobId}`);
    }

    this.log('info', 'üõë Scheduler stopped');
    this.emit('stopped');
  }

  /**
   * üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
   */
  private async executeJob(jobId: string): Promise<void> {
    const job = this.jobs.get(jobId);
    if (!job) {
      this.log('error', `‚ùå Job not found: ${jobId}`);
      return;
    }

    if (!job.canRun()) {
      this.log('warn', `‚ö†Ô∏è Job ${job.name} cannot run, skipping...`);
      return;
    }

    job.start();
    this.log('info', `üéØ Starting job: ${job.name}`);
    this.emit('jobStarted', { jobId, job });

    try {
      await this.runJobTask(jobId);

      job.completeSuccess();
      this.log('info', `‚úÖ Job completed successfully: ${job.name}`);
      this.emit('jobCompleted', { jobId, job, success: true });

    } catch (error) {
      job.completeWithError();
      this.log('error', `‚ùå Job failed: ${job.name}`, error);
      this.emit('jobCompleted', { jobId, job, success: false, error });

      if (this.config.enableNotifications) {
        this.emit('notification', {
          type: 'error',
          title: `Scheduler Job Failed: ${job.name}`,
          message: `Error: ${error instanceof Error ? error.message : String(error)}`,
          jobId
        });
      }
    }
  }

  /**
   * üéØ –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ —Ç–∏–ø—É
   */
  private async runJobTask(jobId: string): Promise<void> {
    switch (jobId) {
      case 'hh-parser':
        await this.runHHParserWithRetry();
        break;
      case 'database-cleanup':
        await this.runDatabaseCleanup();
        break;
      case 'health-check':
        await this.runHealthCheck();
        break;
      default:
        throw new Error(`Unknown job type: ${jobId}`);
    }
  }

  /**
   * üéØ HH Parser —Å retry logic
   */
  private async runHHParserWithRetry(): Promise<void> {
    let lastError: Error | undefined;

    for (let attempt = 1; attempt <= this.config.maxRetries; attempt++) {
      try {
        this.log('info', `üîÑ HH Parser attempt ${attempt}/${this.config.maxRetries}`);
        // await fetchAndSaveHHVacancies();
        this.log('info', '‚ö†Ô∏è HH Parser temporarily disabled due to mongoose import issues');

        this.log('info', '‚úÖ HH Parser completed successfully');
        return;

      } catch (error) {
        lastError = error instanceof Error ? error : new Error(String(error));
        this.log('warn', `‚ö†Ô∏è HH Parser attempt ${attempt} failed:`, lastError.message);

        if (attempt < this.config.maxRetries) {
          const delay = this.config.retryDelay * Math.pow(2, attempt - 1);
          this.log('info', `‚è≥ Retrying in ${delay}ms...`);
          await new Promise(resolve => setTimeout(resolve, delay));
        }
      }
    }

    throw new Error(`HH Parser failed after ${this.config.maxRetries} attempts. Last error: ${lastError?.message}`);
  }

  /**
   * üßπ Database Cleanup Task
   */
  private async runDatabaseCleanup(): Promise<void> {
    this.log('info', 'üßπ Starting database cleanup...');

    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - this.config.cleanupDaysThreshold);

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    this.log('info', `üßπ Database cleanup completed (cutoff: ${cutoffDate.toISOString()})`);
  }

  /**
   * ‚ù§Ô∏è Health Check Task
   */
  private async runHealthCheck(): Promise<void> {
    const healthStatus = {
      timestamp: new Date(),
      scheduler: {
        running: !this.isShuttingDown,
        jobsCount: this.jobs.size,
        runningJobs: Array.from(this.jobs.values()).filter(job => job.running).length
      }
    };

    this.emit('healthCheck', healthStatus);
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ Use Case
   */
  public async getStatus(): Promise<ReturnType<GetSchedulerStatusUseCase['execute']>> {
    const useCase = new GetSchedulerStatusUseCase(
      Array.from(this.jobs.values()),
      this.startTime,
      this.isShuttingDown
    );

    return await useCase.execute();
  }

  /**
   * üéÆ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏
   */
  public async runJobManually(jobId: string): Promise<void> {
    const job = this.jobs.get(jobId);
    if (!job) {
      throw new Error(`Job not found: ${jobId}`);
    }

    this.log('info', `üéÆ Manual execution of job: ${job.name}`);
    await this.executeJob(jobId);
  }

  /**
   * ‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏
   */
  public updateJobConfig(jobId: string, updates: Partial<Pick<ScheduledJob, 'enabled'>>): void {
    const job = this.jobs.get(jobId);
    if (!job) {
      throw new Error(`Job not found: ${jobId}`);
    }

    if (updates.enabled !== undefined && updates.enabled !== job.enabled) {
      job.updateConfig(updates.enabled);

      const cronJob = this.cronJobs.get(jobId);
      if (updates.enabled && !cronJob) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π cron job
        const newCronJob = cron.schedule(job.schedule, async () => {
          await this.executeJob(job.id);
        }, {
          timezone: process.env.TZ || 'Europe/Moscow'
        });
        this.cronJobs.set(jobId, newCronJob);
        newCronJob.start();
      } else if (!updates.enabled && cronJob) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cron job
        cronJob.stop();
        this.cronJobs.delete(jobId);
      }
    }

    this.log('info', `‚öôÔ∏è Updated job config: ${job.name}`, updates);
  }

  /**
   * üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å timestamp
   */
  private log(level: 'info' | 'warn' | 'error', message: string, ...args: any[]): void {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] [SCHEDULER-CLEAN] [${level.toUpperCase()}] ${message}`;

    console.log(logMessage, ...args);
    this.emit('log', { level, message, args, timestamp });
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è cron jobs
  private cronJobs: Map<string, cron.ScheduledTask> = new Map();
}
