import type { TelegramMessage, TelegramParsingResult, TelegramConfig } from '@jspulse/shared';
import { TELEGRAM_CONFIG } from '../../config/telegram.js';
import { normalizeSkill } from '../../utils/transformations.js';
import { containsBackendStopWords, findBackendStopWords } from '../../config/backendStopWords.js';

/**
 * –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö
 */
export class MessageProcessor {
  private config: TelegramConfig;

  constructor(config?: TelegramConfig) {
    this.config = config || this.createConfigFromTelegram();
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ TELEGRAM_CONFIG
   */
  private createConfigFromTelegram(): TelegramConfig {
    return {
      apiId: TELEGRAM_CONFIG.API_ID,
      apiHash: TELEGRAM_CONFIG.API_HASH,
      sessionString: TELEGRAM_CONFIG.SESSION_STRING,
      channels: TELEGRAM_CONFIG.CHANNELS,
      parseSchedule: TELEGRAM_CONFIG.PARSE_SCHEDULE,
      maxMessages: TELEGRAM_CONFIG.MAX_MESSAGES,
      keyWords: TELEGRAM_CONFIG.KEYWORDS.REQUIRED,
      salaryPatterns: [TELEGRAM_CONFIG.PARSING.SALARY_REGEX],
      companyPatterns: [TELEGRAM_CONFIG.PARSING.COMPANY_REGEX],
      locationPatterns: [TELEGRAM_CONFIG.PARSING.LOCATION_REGEX],
      skillsPatterns: [TELEGRAM_CONFIG.PARSING.SKILLS_REGEX],
      enabled: TELEGRAM_CONFIG.PARSER_ENABLED,
      retryAttempts: TELEGRAM_CONFIG.RETRY_ATTEMPTS,
      timeout: TELEGRAM_CONFIG.TIMEOUT
    };
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async processMessage(message: TelegramMessage): Promise<TelegramParsingResult> {
    console.log(`üîç Processing message ${message.id} from ${message.channelUsername}`);

    const text = message.text.toLowerCase();
    const originalText = message.text;

    // 1. –ü–µ—Ä–≤–∏—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    const isValidVacancy = this.validateMessage(text);

    if (!isValidVacancy.valid) {
      return {
        message,
        extractedData: {
          description: originalText,
          confidence: 0
        },
        valid: false,
        errors: isValidVacancy.errors
      };
    }

    // 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const extractedData = {
      title: this.extractTitleV2(originalText),
      company: this.extractCompanyV2(originalText),
      location: this.extractLocationV2(originalText),
      salary: this.extractSalaryV2(originalText),
      skills: this.extractSkillsV2(originalText),
      description: originalText,
      contact: this.extractContactV2(originalText),
      format: this.extractFormat(originalText),
      employment: this.extractEmployment(originalText),
      descriptionUrl: this.extractDescriptionUrl(originalText),
      hashtags: this.extractHashtags(originalText),
      fullDescription: await this.extractFullDescription(originalText),
      confidence: this.calculateConfidenceV2(originalText)
    };

    console.log(`‚úÖ Extracted data with confidence: ${extractedData.confidence}`);

    return {
      message,
      extractedData,
      valid: extractedData.confidence > 0.3, // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
      errors: extractedData.confidence < 0.3 ? ['Low confidence in data extraction'] : undefined
    };
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
   */
  private validateMessage(text: string): { valid: boolean; errors?: string[] } {
    const errors: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const hasRequiredKeywords = this.config.keyWords.some((keyword: string) =>
      text.includes(keyword.toLowerCase())
    );

    if (!hasRequiredKeywords) {
      errors.push(`No required keywords found. Required: ${this.config.keyWords.join(', ')}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞
    const excludedWords = TELEGRAM_CONFIG.KEYWORDS.EXCLUDED;
    const hasExcludedWords = excludedWords.some(word =>
      text.includes(word.toLowerCase())
    );

    if (hasExcludedWords) {
      errors.push('Contains excluded keywords (spam/advertisement)');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –¥–ª—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –±—ç–∫–µ–Ω–¥–∞ (–∫—Ä–æ–º–µ Node.js)
    if (containsBackendStopWords(text)) {
      const foundStopWords = findBackendStopWords(text);
      errors.push(`Contains backend technology stop words: ${foundStopWords.join(', ')}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    if (text.length < 50) {
      errors.push('Message too short to be a valid vacancy');
    }

    return {
      valid: errors.length === 0,
      errors: errors.length > 0 ? errors : undefined
    };
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
   */
  private extractTitle(text: string): string | undefined {
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π
    const titlePatterns = [
      /(?:–≤–∞–∫–∞–Ω—Å–∏—è|–ø–æ–∑–∏—Ü–∏—è|vacancy|position)\s*:?\s*([^\n]+)/gi,
      /(?:^|\n)([A-Za-z–ê-–Ø—ë\s]+(?:developer|—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫|–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç|developer|engineer)[^\n]*)/gi,
      /(?:–∏—â–µ–º|looking for|—Ç—Ä–µ–±—É–µ—Ç—Å—è)\s+([^\n]+)/gi
    ];

    for (const pattern of titlePatterns) {
      const matches = text.matchAll(pattern);
      for (const match of matches) {
        const title = match[1]?.trim();
        if (title && title.length > 10 && title.length < 100) {
          return this.cleanText(title);
        }
      }
    }

    // Fallback: –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const firstLine = text.split('\n')[0]?.trim();
    if (firstLine && firstLine.length > 10 && firstLine.length < 100) {
      return this.cleanText(firstLine);
    }

    return undefined;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏
   */
  private extractCompany(text: string): string | undefined {
    for (const pattern of this.config.companyPatterns) {
      const matches = text.matchAll(pattern);
      for (const match of matches) {
        const company = match[1]?.trim();
        if (company && company.length > 2 && company.length < 100) {
          return this.cleanText(company);
        }
      }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const additionalPatterns = [
      /(?:^|\n)([A-Za-z–ê-–Ø—ë\s]+(?:LLC|–û–û–û|Inc|Ltd|–ó–ê–û|–û–ê–û)[^\n]*)/gi,
      /–≤\s+–∫–æ–º–ø–∞–Ω–∏—é\s+([^\n]+)/gi
    ];

    for (const pattern of additionalPatterns) {
      const matches = text.matchAll(pattern);
      for (const match of matches) {
        const company = match[1]?.trim();
        if (company && company.length > 2 && company.length < 100) {
          return this.cleanText(company);
        }
      }
    }

    return undefined;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
   */
  private extractLocation(text: string): string | undefined {
    for (const pattern of this.config.locationPatterns) {
      const matches = text.matchAll(pattern);
      for (const match of matches) {
        const location = match[1]?.trim();
        if (location && location.length > 2 && location.length < 50) {
          return this.cleanText(location);
        }
      }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏
    const locationPatterns = [
      /(?:–≤|–∏–∑)\s+(–º–æ—Å–∫–≤[–∞-—è]*|—Å–ø–±|–ø–µ—Ç–µ—Ä–±—É—Ä–≥[–∞-—è]*|–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥[–∞-—è]*|–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫[–∞-—è]*|–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä[–∞-—è]*)/gi,
      /(?:remote|—É–¥–∞–ª–µ–Ω[–∞-—è]*|–¥–∏—Å—Ç–∞–Ω—Ü[–∞-—è]*)/gi
    ];

    for (const pattern of locationPatterns) {
      const matches = text.matchAll(pattern);
      for (const match of matches) {
        const location = match[1] || match[0];
        if (location) {
          return this.cleanText(location);
        }
      }
    }

    return undefined;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
   */
  private extractSalary(text: string): { from?: number; to?: number; currency?: string } | undefined {
    for (const pattern of this.config.salaryPatterns) {
      const matches = text.matchAll(pattern);
      for (const match of matches) {
        const salaryText = match[1]?.trim();
        if (salaryText) {
          return this.parseSalary(salaryText, text);
        }
      }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const additionalPatterns = [
      /(\d+(?:\s*\d+)*)\s*-\s*(\d+(?:\s*\d+)*)\s*(?:—Ç—ã—Å|k|—Ç\.—Ä|‚ÇΩ|—Ä—É–±|usd|\$)/gi,
      /–æ—Ç\s*(\d+(?:\s*\d+)*)\s*(?:—Ç—ã—Å|k|—Ç\.—Ä|‚ÇΩ|—Ä—É–±|usd|\$)/gi,
      /–¥–æ\s*(\d+(?:\s*\d+)*)\s*(?:—Ç—ã—Å|k|—Ç\.—Ä|‚ÇΩ|—Ä—É–±|usd|\$)/gi
    ];

    for (const pattern of additionalPatterns) {
      const match = pattern.exec(text);
      if (match) {
        return this.parseSalaryFromMatch(match, text);
      }
    }

    return undefined;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞—Ä–ø–ª–∞—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  private parseSalary(salaryText: string, fullText: string): { from?: number; to?: number; currency?: string } | undefined {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É
    const currency = this.detectCurrency(fullText);

    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞
    const cleanSalary = salaryText.replace(/\s+/g, '');

    // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (100-200, 100–∫-200–∫)
    const rangeMatch = cleanSalary.match(/(\d+)(?:–∫|k)?-(\d+)(?:–∫|k)?/i);
    if (rangeMatch) {
      const from = this.normalizeAmount(parseInt(rangeMatch[1]), fullText);
      const to = this.normalizeAmount(parseInt(rangeMatch[2]), fullText);
      return { from, to, currency };
    }

    // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞
    const singleMatch = cleanSalary.match(/(\d+)(?:–∫|k)?/i);
    if (singleMatch) {
      const amount = this.normalizeAmount(parseInt(singleMatch[1]), fullText);
      return { from: amount, currency };
    }

    return undefined;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞—Ä–ø–ª–∞—Ç—ã –∏–∑ regex match
   */
  private parseSalaryFromMatch(match: RegExpExecArray, fullText: string): { from?: number; to?: number; currency?: string } | undefined {
    const currency = this.detectCurrency(fullText);

    if (match[2]) {
      // –î–∏–∞–ø–∞–∑–æ–Ω
      const from = this.normalizeAmount(parseInt(match[1].replace(/\s+/g, '')), fullText);
      const to = this.normalizeAmount(parseInt(match[2].replace(/\s+/g, '')), fullText);
      return { from, to, currency };
    } else {
      // –û–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
      const amount = this.normalizeAmount(parseInt(match[1].replace(/\s+/g, '')), fullText);
      return { from: amount, currency };
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
   */
  private detectCurrency(text: string): string {
    if (/\$|usd|–¥–æ–ª–ª/gi.test(text)) return 'USD';
    if (/‚Ç¨|eur|–µ–≤—Ä–æ/gi.test(text)) return 'EUR';
    return 'RUB'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É–±–ª–∏
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—É–º–º—ã (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—ã—Å—è—á –≥–¥–µ –Ω—É–∂–Ω–æ)
   */
  private normalizeAmount(amount: number, fullText: string): number {
    // –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å "—Ç—ã—Å", "–∫", "k" –∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ 1000, —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 1000
    if (/—Ç—ã—Å|–∫|k/gi.test(fullText) && amount < 1000) {
      return amount * 1000;
    }
    return amount;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤
   */
  private extractSkills(text: string): string[] {
    const skills: Set<string> = new Set();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    for (const pattern of this.config.skillsPatterns) {
      const matches = text.matchAll(pattern);
      for (const match of matches) {
        const skillsText = match[1]?.trim();
        if (skillsText) {
          this.parseSkillsFromText(skillsText).forEach(skill => skills.add(skill));
        }
      }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
    const techKeywords = [
      'javascript', 'typescript', 'react', 'vue', 'angular', 'node.js', 'python', 'java',
      'php', 'c#', 'c++', 'go', 'rust', 'swift', 'kotlin', 'docker', 'kubernetes',
      'aws', 'azure', 'git', 'sql', 'mongodb', 'postgresql', 'redis', 'html', 'css'
    ];

    const textLower = text.toLowerCase();
    techKeywords.forEach(tech => {
      if (textLower.includes(tech)) {
        skills.add(normalizeSkill(tech));
      }
    });

    return Array.from(skills).slice(0, 10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≤—ã–∫–æ–≤
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–≤—ã–∫–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  private parseSkillsFromText(skillsText: string): string[] {
    // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º, —Ç–æ—á–∫–∞–º —Å –∑–∞–ø—è—Ç–æ–π, –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫
    return skillsText
      .split(/[,;|\n]+/)
      .map(skill => normalizeSkill(skill.trim()))
      .filter(skill => skill.length > 1 && skill.length < 30)
      .map(skill => this.cleanText(skill));
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   */
  private extractContact(text: string): string | undefined {
    const contactPatterns = [
      /@[a-zA-Z0-9_]+/g, // Telegram username
      /\+?\d{1,3}[-.\s]?\(?\d{1,4}\)?[-.\s]?\d{1,4}[-.\s]?\d{1,9}/g, // Phone
      /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g // Email
    ];

    const contacts: string[] = [];

    for (const pattern of contactPatterns) {
      const matches = text.match(pattern);
      if (matches) {
        contacts.push(...matches);
      }
    }

    return contacts.length > 0 ? contacts.join(', ') : undefined;
  }

  /**
   * –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
   */
  private calculateConfidence(text: string): number {
    let confidence = 0;

    // –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const hasKeywords = this.config.keyWords.some((keyword: string) =>
      text.toLowerCase().includes(keyword.toLowerCase())
    );
    if (hasKeywords) confidence += 0.3;

    // –ë–æ–Ω—É—Å –∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
    if (text.includes(':') || text.includes('‚Ä¢') || text.includes('-')) {
      confidence += 0.2;
    }

    // –ë–æ–Ω—É—Å –∑–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
    if (this.extractSalary(text)) {
      confidence += 0.2;
    }

    // –ë–æ–Ω—É—Å –∑–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–∞–≤—ã–∫–æ–≤
    const skills = this.extractSkills(text);
    if (skills.length > 0) {
      confidence += Math.min(0.2, skills.length * 0.05);
    }

    // –ë–æ–Ω—É—Å –∑–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    if (this.extractContact(text)) {
      confidence += 0.1;
    }

    return Math.min(1.0, confidence);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
   */
  private cleanText(text: string): string {
    return text
      .replace(/[¬´¬ª""\(\)\[\]]/g, '') // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ —Å–∫–æ–±–∫–∏
      .replace(/\s+/g, ' ') // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
      .trim();
  }

  /**
   * –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async processMessages(messages: TelegramMessage[]): Promise<TelegramParsingResult[]> {
    console.log(`üîÑ Processing ${messages.length} messages...`);

    const results: TelegramParsingResult[] = [];

    for (const message of messages) {
      try {
        const result = await this.processMessage(message);
        results.push(result);
      } catch (error) {
        console.error(`‚ùå Error processing message ${message.id}:`, error);
        results.push({
          message,
          extractedData: {
            description: message.text,
            confidence: 0
          },
          valid: false,
          errors: [`Processing error: ${error instanceof Error ? error.message : 'Unknown error'}`]
        });
      }
    }

    const validResults = results.filter(r => r.valid);
    console.log(`‚úÖ Processed ${results.length} messages, ${validResults.length} valid vacancies found`);

    return results;
  }

  // ============================================================================
  // –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø @vacancy_it_ulbitv –§–û–†–ú–ê–¢–ê
  // ============================================================================

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ **–∂–∏—Ä–Ω–æ–≥–æ** —Ç–µ–∫—Å—Ç–∞ –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private extractTitleV2(text: string): string | undefined {
    const titleMatch = text.match(TELEGRAM_CONFIG.PARSING.TITLE_REGEX);
    if (titleMatch && titleMatch[1]) {
      return this.cleanText(titleMatch[1]);
    }

    // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
    return this.extractTitle(text);
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ **–ö–æ–º–ø–∞–Ω–∏—è:** –ø–æ–ª—è
   */
  private extractCompanyV2(text: string): string | undefined {
    const companyMatch = text.match(TELEGRAM_CONFIG.PARSING.COMPANY_REGEX);
    if (companyMatch && companyMatch[1]) {
      return this.cleanText(companyMatch[1]);
    }

    // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
    return this.extractCompany(text);
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –∏–∑ **–ó–ü:** –ø–æ–ª—è –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç
   */
  private extractSalaryV2(text: string): { from?: number; to?: number; currency?: string } | undefined {
    const salaryMatches = text.matchAll(TELEGRAM_CONFIG.PARSING.SALARY_REGEX);

    for (const match of salaryMatches) {
      const salaryText = match[1] || match[2];
      if (salaryText) {
        const parsed = this.parseSalary(salaryText, text);
        if (parsed) return parsed;
      }
    }

    // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
    return this.extractSalary(text);
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ **–§–æ—Ä–º–∞—Ç:** –ø–æ–ª—è –∏ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç
   */
  private extractLocationV2(text: string): string | undefined {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã
    const formatMatch = text.match(TELEGRAM_CONFIG.PARSING.FORMAT_REGEX);
    if (formatMatch && formatMatch[1]) {
      const format = formatMatch[1];
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–∫–æ–±–æ–∫
      const locationInBrackets = format.match(/\(([^)]+)\)/);
      if (locationInBrackets) {
        return this.cleanText(locationInBrackets[1]);
      }
      return this.cleanText(format);
    }

    // –ó–∞—Ç–µ–º –∏—â–µ–º –æ–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ª–æ–∫–∞—Ü–∏–∏
    const locationMatches = text.matchAll(TELEGRAM_CONFIG.PARSING.LOCATION_REGEX);
    for (const match of locationMatches) {
      if (match[0]) {
        return this.cleanText(match[0]);
      }
    }

    // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
    return this.extractLocation(text);
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –∏–∑ —Ö–µ—à—Ç–µ–≥–æ–≤ –∏ —Ç–µ–∫—Å—Ç–∞
   */
  private extractSkillsV2(text: string): string[] {
    const skills: Set<string> = new Set();

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Ö–µ—à—Ç–µ–≥–æ–≤
    const hashtagMatches = text.matchAll(TELEGRAM_CONFIG.PARSING.SKILLS_REGEX);
    for (const match of hashtagMatches) {
      if (match[1]) {
        skills.add(match[1].toLowerCase());
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤—ã–∫–∏ –∏–∑ –æ–±—â–∏—Ö —Ö–µ—à—Ç–µ–≥–æ–≤
    const allHashtags = this.extractHashtags(text);
    allHashtags.forEach(tag => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
      const techPattern = /^(react|vue|angular|javascript|typescript|nodejs?|nestjs|express|frontend|backend|fullstack|python|java|php|csharp|dotnet|docker|kubernetes|aws|azure|sql|mongodb|postgresql|redis|html|css|sass|scss|webpack|vite|git|nextjs|next\.js|nuxt|nuxtjs|nuxt\.js|svelte|sveltekit|rxjs|redux|redux[-\s]?toolkit|vuex|pinia|babel|prettier|jest|vitest|testing[-\s]?library|cypress|playwright|storybook|tailwind|tailwindcss|styled[-\s]?components|emotion|graphql|apollo|three\.js|threejs|d3|chart\.js|chartjs|webgl|pwa|service[-\s]?worker)$/i;
      if (techPattern.test(tag)) {
        skills.add(normalizeSkill(tag));
      }
    });

    // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É –µ—Å–ª–∏ –º–∞–ª–æ –Ω–∞–≤—ã–∫–æ–≤
    if (skills.size < 2) {
      const oldSkills = this.extractSkills(text);
      oldSkills.forEach(skill => skills.add(skill));
    }

    return Array.from(skills).slice(0, 15);
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ HR
   */
  private extractContactV2(text: string): string | undefined {
    const hrMatch = text.match(TELEGRAM_CONFIG.PARSING.HR_CONTACT_REGEX);
    if (hrMatch && hrMatch[1]) {
      return hrMatch[1];
    }

    // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
    return this.extractContact(text);
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã
   */
  private extractFormat(text: string): string | undefined {
    const formatMatch = text.match(TELEGRAM_CONFIG.PARSING.FORMAT_REGEX);
    if (formatMatch && formatMatch[1]) {
      return this.cleanText(formatMatch[1]);
    }
    return undefined;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
   */
  private extractEmployment(text: string): string | undefined {
    const employmentMatch = text.match(TELEGRAM_CONFIG.PARSING.EMPLOYMENT_REGEX);
    if (employmentMatch && employmentMatch[1]) {
      return this.cleanText(employmentMatch[1]);
    }
    return undefined;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ
   */
  private extractDescriptionUrl(text: string): string | undefined {
    const urlMatch = text.match(TELEGRAM_CONFIG.PARSING.DESCRIPTION_REGEX);
    if (urlMatch && urlMatch[1]) {
      return urlMatch[1];
    }
    return undefined;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–µ—à—Ç–µ–≥–æ–≤
   */
  private extractHashtags(text: string): string[] {
    const hashtags: string[] = [];
    const hashtagMatches = text.matchAll(TELEGRAM_CONFIG.PARSING.HASHTAGS_REGEX);
    for (const match of hashtagMatches) {
      if (match[1]) {
        hashtags.push(match[1].toLowerCase());
      }
    }
    return hashtags;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ Telegraph —Å—Å—ã–ª–∫–∏
   */
  private async extractFullDescription(text: string): Promise<string | undefined> {
    const descriptionUrl = this.extractDescriptionUrl(text);
    if (!descriptionUrl || !descriptionUrl.includes('telegra.ph')) {
      return undefined;
    }

    try {
      console.log(`üîó Fetching full description from: ${descriptionUrl}`);

      // –ü—Ä–æ—Å—Ç–æ–π HTTP –∑–∞–ø—Ä–æ—Å –∫ Telegraph
      const response = await fetch(descriptionUrl);
      if (!response.ok) {
        console.warn(`‚ö†Ô∏è Failed to fetch description: ${response.status}`);
        return undefined;
      }

      const html = await response.text();

      // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ HTML (—É–¥–∞–ª—è–µ–º —Ç–µ–≥–∏)
      const textContent = html
        .replace(/<script[^>]*>.*?<\/script>/gis, '')
        .replace(/<style[^>]*>.*?<\/style>/gis, '')
        .replace(/<[^>]*>/g, ' ')
        .replace(/\s+/g, ' ')
        .trim();

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –¥–æ –∫–æ–Ω—Ü–∞)
      const contentMatch = textContent.match(/–ö–æ–º–ø–∞–Ω–∏—è:.*$/s);
      if (contentMatch) {
        const fullDescription = contentMatch[0].substring(0, 2000); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        console.log(`‚úÖ Successfully extracted ${fullDescription.length} characters of full description`);
        return fullDescription;
      }

      return textContent.substring(0, 2000); // Fallback

    } catch (error) {
      console.warn(`‚ö†Ô∏è Error fetching full description from ${descriptionUrl}:`, error);
      return undefined;
    }
  }

  /**
   * –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è @vacancy_it_ulbitv —Ñ–æ—Ä–º–∞—Ç–∞
   */
  private calculateConfidenceV2(text: string): number {
    let confidence = 0;

    // –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (0.2)
    const hasKeywords = TELEGRAM_CONFIG.KEYWORDS.REQUIRED.some((keyword: string) =>
      text.toLowerCase().includes(keyword.toLowerCase())
    );
    if (hasKeywords) confidence += 0.2;

    // –ë–æ–Ω—É—Å –∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É @vacancy_it_ulbitv (0.4)
    let structureScore = 0;
    if (text.includes('**–ö–æ–º–ø–∞–Ω–∏—è:**')) structureScore += 0.1;
    if (text.includes('**–ó–ü:**')) structureScore += 0.1;
    if (text.includes('**–§–æ—Ä–º–∞—Ç:**')) structureScore += 0.1;
    if (text.includes('**–ó–∞–Ω—è—Ç–æ—Å—Ç—å:**')) structureScore += 0.1;
    confidence += structureScore;

    // –ë–æ–Ω—É—Å –∑–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ **–∂–∏—Ä–Ω–æ–º** —Ç–µ–∫—Å—Ç–µ (0.15)
    if (TELEGRAM_CONFIG.PARSING.TITLE_REGEX.test(text)) {
      confidence += 0.15;
    }

    // –ë–æ–Ω—É—Å –∑–∞ —Ö–µ—à—Ç–µ–≥–∏ (0.1)
    const hashtags = this.extractHashtags(text);
    if (hashtags.length >= 3) {
      confidence += 0.1;
    }

    // –ë–æ–Ω—É—Å –∑–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ (0.1)
    if (this.extractDescriptionUrl(text)) {
      confidence += 0.1;
    }

    // –ë–æ–Ω—É—Å –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç HR (0.05)
    if (this.extractContactV2(text)) {
      confidence += 0.05;
    }

    return Math.min(1.0, confidence);
  }
} 