import { promises as fs } from 'fs';
import { join } from 'path';
import type { SessionData } from '@jspulse/shared';
import { TELEGRAM_CONFIG } from '../../config/telegram.js';

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram —Å–µ—Å—Å–∏—è–º–∏
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π
 */
export class SessionManager {
  private readonly sessionDir: string;
  private readonly sessionFile: string;
  private cachedSession: SessionData | null = null;

  constructor() {
    // –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
    this.sessionDir = join(process.cwd(), 'data', 'telegram');
    this.sessionFile = join(this.sessionDir, 'session.json');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–µ—Å—Å–∏–π
   */
  private async ensureSessionDir(): Promise<void> {
    try {
      await fs.access(this.sessionDir);
    } catch {
      await fs.mkdir(this.sessionDir, { recursive: true });
      console.log(`üìÅ Created session directory: ${this.sessionDir}`);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ —Ñ–∞–π–ª
   */
  async saveSession(sessionData: Partial<SessionData>): Promise<void> {
    await this.ensureSessionDir();

    const session: SessionData = {
      apiId: sessionData.apiId || TELEGRAM_CONFIG.API_ID,
      apiHash: sessionData.apiHash || TELEGRAM_CONFIG.API_HASH,
      sessionString: sessionData.sessionString || '',
      userId: sessionData.userId || 0,
      username: sessionData.username,
      createdAt: sessionData.createdAt || new Date(),
      lastUsed: new Date()
    };

    await fs.writeFile(this.sessionFile, JSON.stringify(session, null, 2), 'utf-8');
    this.cachedSession = session;

    console.log(`üíæ Session saved for user: ${session.username || session.userId}`);
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
   */
  async loadSession(): Promise<SessionData | null> {
    if (this.cachedSession) {
      return this.cachedSession;
    }

    try {
      const sessionData = await fs.readFile(this.sessionFile, 'utf-8');
      const session: SessionData = JSON.parse(sessionData);

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      session.lastUsed = new Date();
      await this.saveSession(session);

      this.cachedSession = session;
      console.log(`üì± Session loaded for user: ${session.username || session.userId}`);

      return session;
    } catch (error) {
      console.log(`üì≠ No saved session found: ${error instanceof Error ? error.message : 'Unknown error'}`);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ session string –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Ñ–∞–π–ª–∞
   */
  async getSessionString(): Promise<string | null> {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º environment variables
    if (TELEGRAM_CONFIG.SESSION_STRING) {
      return TELEGRAM_CONFIG.SESSION_STRING;
    }

    // –ó–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
    const session = await this.loadSession();
    return session?.sessionString || null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
   */
  async isSessionValid(): Promise<boolean> {
    const sessionString = await this.getSessionString();
    if (!sessionString) {
      return false;
    }

    // –ï—Å–ª–∏ session string –ø–æ–ª—É—á–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–º
    if (TELEGRAM_CONFIG.SESSION_STRING && sessionString === TELEGRAM_CONFIG.SESSION_STRING) {
      return true;
    }

    // –ò–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
    const session = await this.loadSession();
    if (!session) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Å–µ—Å—Å–∏–∏ (—Å–µ—Å—Å–∏–∏ Telegram –æ–±—ã—á–Ω–æ –∂–∏–≤—É—Ç –¥–æ–ª–≥–æ, –Ω–æ –ª—É—á—à–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å)
    const maxAge = 30 * 24 * 60 * 60 * 1000; // 30 –¥–Ω–µ–π
    const sessionAge = Date.now() - session.lastUsed.getTime();

    return sessionAge < maxAge;
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
   */
  async clearSession(): Promise<void> {
    try {
      await fs.unlink(this.sessionFile);
      this.cachedSession = null;
      console.log(`üóëÔ∏è Session cleared`);
    } catch (error) {
      console.log(`‚ö†Ô∏è Error clearing session: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async getSessionInfo(): Promise<{
    exists: boolean;
    valid: boolean;
    userId?: number;
    username?: string;
    lastUsed?: Date;
  }> {
    const sessionString = await this.getSessionString();
    const valid = await this.isSessionValid();

    // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è session string –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (TELEGRAM_CONFIG.SESSION_STRING && sessionString === TELEGRAM_CONFIG.SESSION_STRING) {
      return {
        exists: true,
        valid,
        userId: undefined,
        username: 'from_env_variable',
        lastUsed: new Date()
      };
    }

    // –ò–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
    const session = await this.loadSession();
    return {
      exists: !!session,
      valid,
      userId: session?.userId,
      username: session?.username,
      lastUsed: session?.lastUsed
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  async updateLastUsed(): Promise<void> {
    if (this.cachedSession) {
      this.cachedSession.lastUsed = new Date();
      await this.saveSession(this.cachedSession);
    }
  }
} 