import type { TelegramMessage, TelegramParsingResult } from '@jspulse/shared';
import type { IVacancyRepository } from '@jspulse/shared';
import { TelegramClient } from './telegram/TelegramClient.js';
import { MessageProcessor } from './telegram/MessageProcessor.js';
import { TELEGRAM_CONFIG } from '../config/telegram.js';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */
export class TelegramParserService {
  private telegramClient: TelegramClient;
  private messageProcessor: MessageProcessor;
  private vacancyRepository: IVacancyRepository;

  constructor(vacancyRepository: IVacancyRepository) {
    this.telegramClient = new TelegramClient();
    this.messageProcessor = new MessageProcessor();
    this.vacancyRepository = vacancyRepository;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
   */
  async parseAllChannels(): Promise<{
    totalProcessed: number;
    totalSaved: number;
    channels: Array<{
      channel: string;
      processed: number;
      saved: number;
      errors: string[];
    }>;
  }> {
    console.log('üöÄ Starting Telegram parsing for all channels...');

    if (!TELEGRAM_CONFIG.PARSER_ENABLED) {
      console.log('‚ö†Ô∏è Telegram parser is disabled in configuration');
      return { totalProcessed: 0, totalSaved: 0, channels: [] };
    }

    const results = {
      totalProcessed: 0,
      totalSaved: 0,
      channels: [] as Array<{
        channel: string;
        processed: number;
        saved: number;
        errors: string[];
      }>
    };

    try {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
      await this.telegramClient.connect();
      console.log('‚úÖ Connected to Telegram');

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
      for (const channelUsername of TELEGRAM_CONFIG.CHANNELS) {
        console.log(`\nüì° Processing channel: ${channelUsername}`);

        const channelResult = {
          channel: channelUsername,
          processed: 0,
          saved: 0,
          errors: [] as string[]
        };

        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
          const isAccessible = await this.telegramClient.isChannelAccessible(channelUsername);
          if (!isAccessible) {
            channelResult.errors.push('Channel is not accessible');
            results.channels.push(channelResult);
            continue;
          }

          // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
          const messages = await this.telegramClient.getChannelMessages(
            channelUsername,
            TELEGRAM_CONFIG.MAX_MESSAGES
          );

          console.log(`üì¨ Retrieved ${messages.length} messages from ${channelUsername}`);

          if (messages.length === 0) {
            channelResult.errors.push('No messages found');
            results.channels.push(channelResult);
            continue;
          }

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
          const parsingResults = await this.messageProcessor.processMessages(messages);
          const validResults = parsingResults.filter(r => r.valid);

          channelResult.processed = parsingResults.length;
          results.totalProcessed += parsingResults.length;

          console.log(`‚úÖ Processed ${parsingResults.length} messages, ${validResults.length} valid vacancies`);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
          let savedCount = 0;
          for (const result of validResults) {
            try {
              const saved = await this.saveVacancy(result, channelUsername);
              if (saved) savedCount++;
            } catch (saveError) {
              const errorMessage = saveError instanceof Error ? saveError.message : 'Unknown save error';
              channelResult.errors.push(`Save error: ${errorMessage}`);
              console.error(`‚ùå Error saving vacancy from message ${result.message.id}:`, saveError);
            }
          }

          channelResult.saved = savedCount;
          results.totalSaved += savedCount;

          console.log(`üíæ Saved ${savedCount} new vacancies from ${channelUsername}`);

        } catch (channelError) {
          const errorMessage = channelError instanceof Error ? channelError.message : 'Unknown channel error';
          channelResult.errors.push(errorMessage);
          console.error(`‚ùå Error processing channel ${channelUsername}:`, channelError);
        }

        results.channels.push(channelResult);
      }

      await this.telegramClient.disconnect();
      console.log('üì± Disconnected from Telegram');

      console.log('\nüìä PARSING SUMMARY:');
      console.log(`üìù Total messages processed: ${results.totalProcessed}`);
      console.log(`üíæ Total vacancies saved: ${results.totalSaved}`);
      console.log(`üìà Success rate: ${results.totalProcessed > 0 ? (results.totalSaved / results.totalProcessed * 100).toFixed(1) : 0}%`);

      return results;

    } catch (error) {
      console.error('‚ùå Critical error in Telegram parsing:', error);
      await this.telegramClient.disconnect();
      throw error;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  private async saveVacancy(
    result: TelegramParsingResult,
    channelUsername: string
  ): Promise<boolean> {
    const data = result.extractedData;

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π sourceId –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const sourceId = `telegram_${channelUsername}_${result.message.id}`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≤–∞–∫–∞–Ω—Å–∏—è —Å —Ç–∞–∫–∏–º sourceId
    const existingVacancy = await this.vacancyRepository.findBySourceId(sourceId);
    if (existingVacancy) {
      console.log(`‚ö†Ô∏è Vacancy from message ${result.message.id} already exists, skipping`);
      return false;
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const vacancyData = {
      // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è MongoDB
      externalId: sourceId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º sourceId –∫–∞–∫ externalId
      title: data.title || 'Unknown Position',
      company: data.company || 'Unknown Company',
      location: data.location || 'Remote',
      url: (data as any).descriptionUrl || `https://t.me/${channelUsername.replace('@', '')}/${result.message.id}`,
      publishedAt: result.message.date || new Date(),
      source: 'telegram' as const,

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      description: data.description,
      fullDescription: (data as any).fullDescription,
      skills: data.skills || [],
      salaryFrom: data.salary?.from,
      salaryTo: data.salary?.to,
      salaryCurrency: data.salary?.currency || 'RUB',
      contact: data.contact,
      workFormat: (data as any).format,
      employment: (data as any).employment,

      // Telegram-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è
      sourceId,
      sourceChannel: channelUsername,
      sourceUrl: (data as any).descriptionUrl,
      parsedAt: new Date(),
      hashtags: (data as any).hashtags || [],
      confidence: data.confidence
    };

    try {
      const savedVacancy = await this.vacancyRepository.create(vacancyData);
      console.log(`‚úÖ Saved vacancy: ${savedVacancy.title} at ${savedVacancy.company}`);
      return true;
    } catch (error) {
      console.error('‚ùå Error saving vacancy:', error);
      return false;
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
   */
  async parseChannel(channelUsername: string): Promise<{
    processed: number;
    saved: number;
    errors: string[];
  }> {
    console.log(`üîç Parsing single channel: ${channelUsername}`);

    const result = await this.parseAllChannels();
    const channelResult = result.channels.find(c => c.channel === channelUsername);

    return channelResult || { processed: 0, saved: 0, errors: ['Channel not found in results'] };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
   */
  async getParsingStats(): Promise<{
    totalVacancies: number;
    telegramVacancies: number;
    channelBreakdown: Array<{ channel: string; count: number; latest: Date | null }>;
  }> {
    const totalVacancies = await this.vacancyRepository.count();
    const telegramVacancies = await this.vacancyRepository.count({ source: 'telegram' });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
    const channelBreakdown = [];
    for (const channel of TELEGRAM_CONFIG.CHANNELS) {
      const count = await this.vacancyRepository.count({ sourceChannel: channel });
      // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –±–µ–∑ –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏
      channelBreakdown.push({
        channel,
        count,
        latest: null // TODO: –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ
      });
    }

    return {
      totalVacancies,
      telegramVacancies,
      channelBreakdown
    };
  }
} 