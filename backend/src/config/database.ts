import mongoose from 'mongoose';

/**
 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ (app.ts).
 */
export async function connectToDatabase(): Promise<void> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ª–∏ –º—ã —É–∂–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if (mongoose.connection.readyState === 1) {
      console.log('‚úÖ Already connected to MongoDB');
      return;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º, –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è
    if (mongoose.connection.readyState !== 0) {
      await mongoose.disconnect();
      console.log('üìù Disconnected from previous MongoDB connection');
    }

    const mongoUri = process.env.MONGO_URI || process.env.MONGODB_URI || 'mongodb://localhost:27017/jspulse';

    await mongoose.connect(mongoUri, {
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
    });

    console.log('‚úÖ Connected to MongoDB successfully');
  } catch (error) {
    console.error('‚ùå MongoDB connection failed:', error);
    throw error;
  }
}

/**
 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ —Ç–µ—Å—Ç–æ–≤.
 * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
 */
export const connectDB = async (): Promise<void> => {
  const mongoUri = process.env.MONGO_URI || process.env.MONGODB_URI || 'mongodb://localhost:27017/jspulse';

  if (!mongoUri) {
    console.error("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è MONGO_URI –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.");
    process.exit(1);
  }

  try {
    await mongoose.connect(mongoUri, {
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
    });
    console.log("MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", error);
    process.exit(1);
  }
};

/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB.
 */
export async function disconnectFromDatabase(): Promise<void> {
  try {
    await mongoose.disconnect();
    console.log('‚úÖ Disconnected from MongoDB');
  } catch (error) {
    console.error('‚ùå Error disconnecting from MongoDB:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB.
 */
export function getConnectionStatus(): string {
  const states = {
    0: 'disconnected',
    1: 'connected',
    2: 'connecting',
    3: 'disconnecting'
  };
  return states[mongoose.connection.readyState as keyof typeof states] || 'unknown';
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ ObjectId.
 */
export function isValidObjectId(id: string): boolean {
  return mongoose.isValidObjectId(id);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º mongoose –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { mongoose };
export default mongoose; 