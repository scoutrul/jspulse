import express from 'express';
import cors from 'cors';
import { connectToDatabase } from './config/database.js';
import { containerFactory } from './container/ContainerFactory.js';
import { createDIMiddleware, diErrorHandler } from './middleware/diMiddleware.js';
import vacancyRoutes from './routes/vacancyRoutes.js';
import schedulerRoutes from './routes/schedulerRoutes.js';
import { SchedulerService } from './services/SchedulerService.js';

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å DI Container.
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ middleware, –º–∞—Ä—à—Ä—É—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.
 */
export async function createApp(): Promise<{ app: express.Application; container: any; scheduler: SchedulerService }> {
  const app = express();

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
  await connectToDatabase();

  // –°–æ–∑–¥–∞–Ω–∏–µ production DI Container —Å–æ –≤—Å–µ–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
  const rootContainer = containerFactory.createProduction();

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  const validation = containerFactory.validateContainer(rootContainer);
  if (!validation.isValid) {
    console.error('‚ùå DI Container validation failed:', validation.errors);
    throw new Error('Invalid DI Container configuration');
  }

  console.log('‚úÖ DI Container validation passed');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ SchedulerService
  const scheduler = rootContainer.resolve<SchedulerService>('SchedulerService');
  await scheduler.start();
  console.log('‚è∞ SchedulerService started successfully');

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö middleware
  app.use(cors());
  app.use(express.json({ limit: '10mb' }));
  app.use(express.urlencoded({ extended: true }));

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º DI middleware –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
  app.use(createDIMiddleware(rootContainer));

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ development —Ä–µ–∂–∏–º–µ
  if (process.env.NODE_ENV === 'development') {
    app.use((req, res, next) => {
      console.log(`[${new Date().toISOString()}] ${req.method} ${req.path}`);
      next();
    });
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
  app.use('/api/vacancies', vacancyRoutes);
  app.use('/api/scheduler', schedulerRoutes);

  // Health check endpoint
  app.get('/health', async (req, res) => {
    const schedulerHealth = await scheduler.getHealth();
    res.json({
      status: 'healthy',
      timestamp: new Date().toISOString(),
      container: {
        registeredServices: rootContainer.getRegisteredTokens().length,
        stats: (rootContainer as any).getStats?.()
      },
      scheduler: {
        status: schedulerHealth.status,
        totalJobs: schedulerHealth.totalJobs,
        runningJobs: schedulerHealth.runningJobs,
        lastError: schedulerHealth.lastError
      }
    });
  });

  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ DI Container
  app.get('/api/container/stats', (req, res) => {
    const stats = (rootContainer as any).getStats?.();
    res.json({
      success: true,
      data: {
        stats,
        registeredTokens: rootContainer.getRegisteredTokens().map(token => String(token))
      }
    });
  });

  // Error handling middleware
  app.use(diErrorHandler);

  // –û–±—â–∏–π error handler
  app.use((error: Error, req: express.Request, res: express.Response, next: express.NextFunction) => {
    console.error('Unhandled error:', error);

    res.status(500).json({
      success: false,
      error: {
        code: 500,
        message: 'Internal server error',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      }
    });
  });

  // 404 handler
  app.use((req, res) => {
    res.status(404).json({
      success: false,
      error: {
        code: 404,
        message: 'Endpoint not found'
      }
    });
  });

  return { app, container: rootContainer, scheduler };
}

/**
 * Graceful shutdown handler –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤.
 */
export async function gracefulShutdown(container: any, scheduler: SchedulerService) {
  console.log('üîÑ Starting graceful shutdown...');

  try {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º scheduler –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º
    console.log('‚è∞ Stopping scheduler...');
    await scheduler.stop();
    console.log('‚úÖ Scheduler stopped successfully');

    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã DI Container
    await container.dispose();
    console.log('‚úÖ DI Container disposed successfully');

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ cleanup –æ–ø–µ—Ä–∞—Ü–∏–∏:
    // - –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î
    // - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ background tasks
    // - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ state

    console.log('‚úÖ Graceful shutdown completed');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error during graceful shutdown:', error);
    process.exit(1);
  }
} 