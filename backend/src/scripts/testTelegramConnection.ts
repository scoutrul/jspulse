/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SessionManager –∏ TelegramClient –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 */

import { TelegramClient } from '../services/telegram/TelegramClient.js';
import { SessionManager } from '../services/telegram/SessionManager.js';
import { validateTelegramConfig, logTelegramConfig } from '../config/telegram.js';

async function testTelegramConnection(): Promise<void> {
  console.log('üß™ Starting Telegram connection test...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    console.log('üìã Step 1: Validating configuration...');
    const configValidation = validateTelegramConfig();

    if (!configValidation.isValid) {
      console.error('‚ùå Configuration validation failed:');
      configValidation.errors.forEach(error => console.error(`  - ${error}`));
      return;
    }

    console.log('‚úÖ Configuration is valid');
    logTelegramConfig();
    console.log('');

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º SessionManager
    console.log('üìã Step 2: Testing SessionManager...');
    const sessionManager = new SessionManager();
    const sessionInfo = await sessionManager.getSessionInfo();

    console.log('üìä Session Info:');
    console.log(`  - Exists: ${sessionInfo.exists}`);
    console.log(`  - Valid: ${sessionInfo.valid}`);
    console.log(`  - User ID: ${sessionInfo.userId || 'N/A'}`);
    console.log(`  - Username: ${sessionInfo.username || 'N/A'}`);
    console.log(`  - Last Used: ${sessionInfo.lastUsed || 'N/A'}`);
    console.log('');

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º TelegramClient (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
    console.log('üìã Step 3: Testing TelegramClient initialization...');
    const telegramClient = new TelegramClient();
    const connectionStatus = telegramClient.getConnectionStatus();

    console.log('üìä Connection Status:');
    console.log(`  - Connected: ${connectionStatus.connected}`);
    console.log(`  - Session Valid: ${connectionStatus.sessionValid}`);
    console.log('');

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ session string
    console.log('üìã Step 4: Checking session string availability...');
    const sessionString = await sessionManager.getSessionString();

    if (sessionString) {
      console.log('‚úÖ Session string is available');
      console.log(`  - Length: ${sessionString.length} characters`);
      console.log(`  - Starts with: ${sessionString.substring(0, 10)}...`);
    } else {
      console.log('‚ö†Ô∏è No session string found');
      console.log('üí° To connect to Telegram, you need to:');
      console.log('   1. Set TELEGRAM_API_ID and TELEGRAM_API_HASH in environment');
      console.log('   2. Generate session string using authentication flow');
      console.log('   3. Set TELEGRAM_SESSION_STRING in environment or use file storage');
    }
    console.log('');

    console.log('‚úÖ Basic Telegram integration test completed successfully!');
    console.log('üöÄ Ready for Phase 1 implementation');

  } catch (error) {
    console.error('‚ùå Test failed with error:', error);
    if (error instanceof Error) {
      console.error('Stack trace:', error.stack);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  testTelegramConnection()
    .then(() => {
      console.log('\nüèÅ Test completed');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• Test failed:', error);
      process.exit(1);
    });
}

export { testTelegramConnection }; 