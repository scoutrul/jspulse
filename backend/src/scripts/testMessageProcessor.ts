/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ MessageProcessor
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤
 */

import { MessageProcessor } from '../services/telegram/MessageProcessor.js';
import type { TelegramMessage } from '@jspulse/shared';

// –ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤
const testMessages: TelegramMessage[] = [
  {
    id: 1,
    text: `üöÄ –í–∞–∫–∞–Ω—Å–∏—è: Frontend Developer (React/TypeScript)

–ö–æ–º–ø–∞–Ω–∏—è: TechCorp LLC
–õ–æ–∫–∞—Ü–∏—è: –ú–æ—Å–∫–≤–∞/–£–¥–∞–ª–µ–Ω–Ω–æ
–ó–∞—Ä–ø–ª–∞—Ç–∞: –æ—Ç 120–∫ –¥–æ 200–∫ —Ä—É–±.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
‚Ä¢ React, TypeScript
‚Ä¢ Redux, Redux Toolkit
‚Ä¢ HTML5, CSS3, SASS
‚Ä¢ Git, Webpack
‚Ä¢ –û–ø—ã—Ç –æ—Ç 2 –ª–µ—Ç

–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
‚Ä¢ –ö–æ–¥-—Ä–µ–≤—å—é
‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏

–ö–æ–Ω—Ç–∞–∫—Ç—ã: @hr_manager_tech`,
    date: new Date(),
    channelId: '123',
    channelUsername: '@vacancy_it_ulbitv'
  },
  {
    id: 2,
    text: `üíº –ò—â–µ–º Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞

–í —Å—Ç–∞—Ä—Ç–∞–ø –Ω—É–∂–µ–Ω Senior Python Developer
–û–ø—ã—Ç: 3+ –≥–æ–¥–∞
–°—Ç–µ–∫: Python, Django, PostgreSQL, Docker
–ó–∞—Ä–ø–ª–∞—Ç–∞: 150-250–∫
–õ–æ–∫–∞—Ü–∏—è: –°–ü–± –∏–ª–∏ —É–¥–∞–ª–µ–Ω–Ω–æ

–ß—Ç–æ –¥–µ–ª–∞—Ç—å:
- Backend API —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –ú–µ–Ω—Ç–æ—Ä–∏–Ω–≥ –¥–∂—É–Ω–æ–≤

üì© –û—Ç–∫–ª–∏–∫–∏: python.jobs@example.com`,
    date: new Date(),
    channelId: '123',
    channelUsername: '@vacancy_it_ulbitv'
  },
  {
    id: 3,
    text: `üì± –¢—Ä–µ–±—É–µ—Ç—Å—è iOS Developer

–ö–æ–º–ø–∞–Ω–∏—è FinTech
–ú–æ—Å–∫–≤–∞, –æ—Ñ–∏—Å + –≥–∏–±—Ä–∏–¥
$2000-4000

–ù—É–∂–Ω–æ –∑–Ω–∞—Ç—å:
Swift, UIKit, SwiftUI, CoreData
–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: MVVM, Coordinator
CI/CD, Git Flow

–ö–æ–Ω—Ç–∞–∫—Ç: @ios_recruiter_fintech
+7 (999) 123-45-67`,
    date: new Date(),
    channelId: '123',
    channelUsername: '@vacancy_it_ulbitv'
  },
  {
    id: 4,
    text: `üî• –°–†–û–ß–ù–û! DevOps Engineer

–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è
Remote work
–ó–∞—Ä–ø–ª–∞—Ç–∞: –æ—Ç 300–∫ —Ä—É–±–ª–µ–π

–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
- Kubernetes, Docker
- AWS, Terraform
- Jenkins, GitLab CI
- Monitoring: Prometheus, Grafana

–û–ø—ã—Ç –æ—Ç 3 –ª–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
english B2+

CV –Ω–∞ devops@company.com`,
    date: new Date(),
    channelId: '123',
    channelUsername: '@vacancy_it_ulbitv'
  },
  {
    id: 5,
    text: `–ü—Ä–æ–¥–∞–º iPhone 15 Pro Max 256GB
–¶–µ–Ω–∞: 150000 —Ä—É–±–ª–µ–π
–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–ª–∏—á–Ω–æ–µ
–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –µ—Å—Ç—å
–ö–æ–Ω—Ç–∞–∫—Ç: @seller123`,
    date: new Date(),
    channelId: '123',
    channelUsername: '@vacancy_it_ulbitv'
  },
  {
    id: 6,
    text: `–í–∞–∫–∞–Ω—Å–∏—è Junior Frontend

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –∑–Ω–∞–Ω–∏–µ HTML, CSS, JS
–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
–û–ø—ã—Ç –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ

–û–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –õ–°`,
    date: new Date(),
    channelId: '123',
    channelUsername: '@vacancy_it_ulbitv'
  },
  {
    id: 7,
    text: `üéØ Vacancy: Full Stack Developer

Company: StartupXYZ
Location: Ekaterinburg
Salary: 180–∫-250–∫ RUB

Tech Stack:
‚úÖ Node.js, Express.js
‚úÖ React, NextJS  
‚úÖ PostgreSQL, Redis
‚úÖ Docker, AWS

Requirements:
‚Ä¢ 2+ years experience
‚Ä¢ English B1+
‚Ä¢ Team player

Apply: hr@startupxyz.com
Telegram: @hr_startupxyz`,
    date: new Date(),
    channelId: '123',
    channelUsername: '@vacancy_it_ulbitv'
  }
];

async function testMessageProcessor(): Promise<void> {
  console.log('üß™ Starting MessageProcessor test...\n');

  try {
    // –°–æ–∑–¥–∞–µ–º MessageProcessor
    const processor = new MessageProcessor();
    console.log('‚úÖ MessageProcessor initialized\n');

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    for (let i = 0; i < testMessages.length; i++) {
      const message = testMessages[i];
      console.log(`\nüìù Testing message ${i + 1}/${testMessages.length}:`);
      console.log(`Text preview: "${message.text.substring(0, 60)}..."`);
      console.log('---');

      const result = await processor.processMessage(message);

      console.log(`üìä Results:`);
      console.log(`  ‚úì Valid: ${result.valid}`);
      console.log(`  ‚úì Confidence: ${(result.extractedData.confidence * 100).toFixed(1)}%`);

      if (result.extractedData.title) {
        console.log(`  ‚úì Title: "${result.extractedData.title}"`);
      }

      if (result.extractedData.company) {
        console.log(`  ‚úì Company: "${result.extractedData.company}"`);
      }

      if (result.extractedData.location) {
        console.log(`  ‚úì Location: "${result.extractedData.location}"`);
      }

      if (result.extractedData.salary) {
        const salary = result.extractedData.salary;
        let salaryStr = '';
        if (salary.from && salary.to) {
          salaryStr = `${salary.from}-${salary.to} ${salary.currency || 'RUB'}`;
        } else if (salary.from) {
          salaryStr = `from ${salary.from} ${salary.currency || 'RUB'}`;
        }
        console.log(`  ‚úì Salary: ${salaryStr}`);
      }

      if (result.extractedData.skills && result.extractedData.skills.length > 0) {
        console.log(`  ‚úì Skills: ${result.extractedData.skills.join(', ')}`);
      }

      if (result.extractedData.contact) {
        console.log(`  ‚úì Contact: ${result.extractedData.contact}`);
      }

      if (result.errors && result.errors.length > 0) {
        console.log(`  ‚ùå Errors: ${result.errors.join(', ')}`);
      }
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    console.log('\n\nüîÑ Testing batch processing...');
    const batchResults = await processor.processMessages(testMessages);

    const validCount = batchResults.filter(r => r.valid).length;
    const averageConfidence = batchResults.reduce((sum, r) => sum + r.extractedData.confidence, 0) / batchResults.length;

    console.log('\nüìà Batch Processing Results:');
    console.log(`  üìä Total messages: ${batchResults.length}`);
    console.log(`  ‚úÖ Valid vacancies: ${validCount} (${(validCount / batchResults.length * 100).toFixed(1)}%)`);
    console.log(`  üìè Average confidence: ${(averageConfidence * 100).toFixed(1)}%`);

    // –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º
    console.log('\nüîç Analysis by message type:');
    batchResults.forEach((result, index) => {
      const messageType = result.valid ? '‚úÖ Valid Vacancy' :
        result.extractedData.confidence > 0.1 ? '‚ö†Ô∏è Low Confidence' :
          '‚ùå Invalid';
      console.log(`  ${index + 1}. ${messageType} (${(result.extractedData.confidence * 100).toFixed(1)}%)`);
    });

    console.log('\n‚úÖ MessageProcessor test completed successfully!');
    console.log('üöÄ Ready to integrate with TelegramClient');

  } catch (error) {
    console.error('‚ùå Test failed with error:', error);
    if (error instanceof Error) {
      console.error('Stack trace:', error.stack);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  testMessageProcessor()
    .then(() => {
      console.log('\nüèÅ Test completed');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• Test failed:', error);
      process.exit(1);
    });
}

export { testMessageProcessor }; 