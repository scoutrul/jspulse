#!/usr/bin/env node

/**
 * –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Telegram session string
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å TELEGRAM_SESSION_STRING –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
 */

import { TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions/index.js';
import { Api } from 'telegram/tl/index.js';
import * as readline from 'readline';
import { validateTelegramConfig } from '../config/telegram.js';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å readline
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function askQuestion(question: string): Promise<string> {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer.trim());
    });
  });
}

async function generateTelegramSession(): Promise<void> {
  console.log('üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Telegram Session String');
  console.log('='.repeat(50));
  console.log('');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    console.log('üìã –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    const configValidation = validateTelegramConfig();

    if (!configValidation.isValid) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
      configValidation.errors.forEach(error => console.error(`  - ${error}`));
      console.log('\nüí° –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
      console.log('1. –ü–æ–ª—É—á–∏—Ç–µ API credentials –Ω–∞ https://my.telegram.org/apps');
      console.log('2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
      console.log('   export TELEGRAM_API_ID=your_api_id');
      console.log('   export TELEGRAM_API_HASH=your_api_hash');
      rl.close();
      return;
    }

    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');

    // 2. –ü–æ–ª—É—á–∞–µ–º API credentials
    const apiId = parseInt(process.env.TELEGRAM_API_ID || '');
    const apiHash = process.env.TELEGRAM_API_HASH || '';

    console.log('\nüìã –®–∞–≥ 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞...');
    console.log(`API ID: ${apiId}`);
    console.log(`API Hash: ${apiHash.substring(0, 8)}...`);

    // 3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    const stringSession = new StringSession(''); // –ü—É—Å—Ç–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞
    const client = new TelegramClient(stringSession, apiId, apiHash, {
      connectionRetries: 5,
    });

    console.log('\nüìã –®–∞–≥ 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...');
    await client.start({
      phoneNumber: async () => {
        const phone = await askQuestion('üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX): ');
        console.log(`–ò—Å–ø–æ–ª—å–∑—É—é –Ω–æ–º–µ—Ä: ${phone}`);
        return phone;
      },
      password: async () => {
        const password = await askQuestion('üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞): ');
        return password;
      },
      phoneCode: async () => {
        const code = await askQuestion('üì® –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS/Telegram: ');
        return code;
      },
      onError: (err: any) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', err);
        throw err;
      },
    });

    console.log('\n‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è!');

    // 4. –ü–æ–ª—É—á–∞–µ–º session string
    const sessionString = client.session.save() as unknown as string;
    console.log('\nüìã –®–∞–≥ 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è session string...');
    console.log('‚úÖ Session string —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
    console.log('\nüìã –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏...');
    try {
      const me = await client.getMe();
      console.log(`‚úÖ –°–µ—Å—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${me.username || 'unknown'} (${me.firstName})`);
    } catch (error) {
      console.warn('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
    console.log('\nüìã –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É @vacancy_it_ulbitv...');
    try {
      const channel = await client.getEntity('@vacancy_it_ulbitv');
      if (channel) {
        console.log('‚úÖ –ö–∞–Ω–∞–ª @vacancy_it_ulbitv –¥–æ—Å—Ç—É–ø–µ–Ω!');

        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∞
        const messages = await client.getMessages(channel, { limit: 2 });
        console.log(`üì¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (${messages.length}—à—Ç):`);
        messages.forEach((msg: any, i: number) => {
          if (msg && msg.message) {
            const preview = msg.message.substring(0, 80);
            console.log(`  ${i + 1}. "${preview}${msg.message.length > 80 ? '...' : ''}"`);
          }
        });
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∫–∞–Ω–∞–ª @vacancy_it_ulbitv –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
      console.log('üí° –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å, –µ—Å–ª–∏:');
      console.log('  - –ö–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π');
      console.log('  - –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª');
      console.log('  - –ö–∞–Ω–∞–ª –∏–∑–º–µ–Ω–∏–ª username');
    }

    await client.disconnect();

    // 7. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n' + '='.repeat(70));
    console.log('üéâ SUCCESS! Session string —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    console.log('='.repeat(70));
    console.log('\nüìã –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç session string –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n');
    console.log('export TELEGRAM_SESSION_STRING="' + sessionString + '"');
    console.log('\nüí° –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ —Ñ–∞–π–ª .env:');
    console.log('TELEGRAM_SESSION_STRING="' + sessionString + '"');

    console.log('\nüìã –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è, –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å:');
    console.log('npm run test:telegram:real');
    console.log('');
    console.log('üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ session string!');
    console.log('   –≠—Ç–æ —Ä–∞–≤–Ω–æ—Å–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—á–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–µ–º—É Telegram –∞–∫–∫–∞—É–Ω—Ç—É.');

  } catch (error) {
    console.error('\nüí• –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏:', error);
    if (error instanceof Error) {
      console.error('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:', error.message);
    }
  } finally {
    rl.close();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞, –µ—Å–ª–∏ –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  generateTelegramSession()
    .then(() => {
      console.log('\nüèÅ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –û—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

export { generateTelegramSession }; 