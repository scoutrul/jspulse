import mongoose from "../config/mongoose.js";
import ky, { HTTPError } from "ky";
import { transformHHVacancyToIVacancy, transformHHVacancyWithFullDescription } from "../utils/transformations.js";
import type { HHResponseRaw } from "@jspulse/shared";
import dotenv from "dotenv";
dotenv.config();
import { HH_API_BASE_URL } from "../config/api.js";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö
async function getVacancyModel() {
  // mongoose —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω

  const vacancySchema = new mongoose.Schema(
    {
      externalId: { type: String, unique: true, sparse: true },
      title: { type: String, required: true },
      company: { type: String, required: true },
      location: { type: String },
      url: { type: String, required: true },
      publishedAt: { type: Date, required: true },
      source: { type: String, required: true },
      description: { type: String },
      fullDescription: {
        type: {
          raw: { type: String },
          preview: { type: String },
          processed: { type: String },
          textOnly: { type: String }
        },
        default: undefined
      },
      processedHtml: { type: String },
      schedule: { type: String },
      skills: [{ type: String }],
      salaryFrom: { type: Number },
      salaryTo: { type: Number },
      salaryCurrency: { type: String },
      experience: { type: String },
      employment: { type: String },
      address: { type: String },

      sourceId: { type: String, unique: true, sparse: true },
      sourceChannel: { type: String },
      sourceUrl: { type: String },
      contact: { type: String },
      workFormat: { type: String },
      hashtags: [{ type: String }],
      confidence: { type: Number },
      parsedAt: { type: Date },

      rawData: { type: mongoose.Schema.Types.Mixed },
    },
    {
      timestamps: true,
      versionKey: false,
      collection: "vacancies",
    }
  );

  vacancySchema.index({ publishedAt: -1 });

  return mongoose.model("Vacancy", vacancySchema);
}

const SOURCE_HH = "hh.ru";
const MAX_VACANCIES_PER_PAGE = 10; // HH API limit
const MAX_PAGES_TO_FETCH = 20; // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 5 –¥–æ 20 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 200 –≤–∞–∫–∞–Ω—Å–∏–π
const SEARCH_TEXT = "JavaScript Developer OR Frontend Developer";
const FETCH_FULL_DESCRIPTIONS = process.env.FETCH_FULL_DESCRIPTIONS === "true"; // –ö–æ–Ω—Ç—Ä–æ–ª—å —á–µ—Ä–µ–∑ env

async function fetchAndSaveHHVacancies() {
  console.log("üöÄ –ó–∞–ø—É—Å–∫–∞—é incremental –∏–º–ø–æ—Ä—Ç –≤–∞–∫–∞–Ω—Å–∏–π —Å HeadHunter...");
  console.log(`üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏: ${MAX_PAGES_TO_FETCH} —Å—Ç—Ä–∞–Ω–∏—Ü √ó ${MAX_VACANCIES_PER_PAGE} = –¥–æ ${MAX_PAGES_TO_FETCH * MAX_VACANCIES_PER_PAGE} –≤–∞–∫–∞–Ω—Å–∏–π`);
  console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π: ${FETCH_FULL_DESCRIPTIONS ? '–í–ö–õ–Æ–ß–ï–ù–û' : '–í–´–ö–õ–Æ–ß–ï–ù–û'}`);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º MongoDB –≤–Ω—É—Ç—Ä–∏ Docker —Å–µ—Ç–∏
  const mongoUrl = process.env.MONGO_URI || "mongodb://mongodb:27017/jspulse";

  let connection;
  try {
    // mongoose —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
    connection = await mongoose.connect(mongoUrl);
    console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB");

    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    const Vacancy = await getVacancyModel();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î
    const initialCount = await Vacancy.countDocuments();
    console.log(`üìã –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –≤ –ë–î: ${initialCount}`);

    let totalReceived = 0;
    let totalNew = 0;
    let totalUpdated = 0;
    let totalSkipped = 0;

    for (let page = 0; page < MAX_PAGES_TO_FETCH; page++) {
      const searchParams = {
        text: SEARCH_TEXT,
        area: "1", // –ú–æ—Å–∫–≤–∞
        per_page: String(MAX_VACANCIES_PER_PAGE),
        page: String(page),
        professional_role: "96", // –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
      };

      console.log(
        `üìÑ –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page + 1}/${MAX_PAGES_TO_FETCH} —Å ${HH_API_BASE_URL}...`
      );

      try {
        const data = await ky
          .get(HH_API_BASE_URL + "/vacancies", {
            searchParams: searchParams,
            headers: {
              "User-Agent": "JSPulse",
              "HH-User-Agent": "JSPulse",
            },
            timeout: 30000,
          })
          .json<HHResponseRaw>();

        if (!data.items) {
          console.error(`‚ùå –û—à–∏–±–∫–∞: –û—Ç–≤–µ—Ç –æ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'items'. –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:`, data);
          return;
        }

        const receivedCount = data.items.length;
        console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1}: –ü–æ–ª—É—á–µ–Ω–æ ${receivedCount} –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç HH API`);
        totalReceived += receivedCount;

        if (receivedCount === 0) {
          console.log("üèÅ –ë–æ–ª—å—à–µ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º.");
          break;
        }

        let pageNew = 0;
        let pageUpdated = 0;
        let pageSkipped = 0;

        for (const hhVacancy of data.items) {
          let transformedData;

          if (FETCH_FULL_DESCRIPTIONS) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
            transformedData = await transformHHVacancyWithFullDescription(hhVacancy, true);
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ –¥–µ—Ç–∞–ª—è–º –≤–∞–∫–∞–Ω—Å–∏–π
            await new Promise(resolve => setTimeout(resolve, 200));
          } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
            transformedData = transformHHVacancyToIVacancy(hhVacancy);
          }

          if (!transformedData) {
            pageSkipped++;
            continue;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å skills –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
          if (
            !transformedData.skills ||
            !Array.isArray(transformedData.skills) ||
            transformedData.skills.length === 0
          ) {
            // –ï—Å–ª–∏ –Ω–∞–≤—ã–∫–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –±–∞–∑–æ–≤—ã–π –Ω–∞–≤—ã–∫ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
            const titleWords = transformedData.title.toLowerCase().split(/\W+/);
            const possibleSkills = [
              "javascript",
              "react",
              "vue",
              "angular",
              "typescript",
              "frontend",
              "backend",
            ];
            const detectedSkills = possibleSkills.filter(
              (skill) =>
                titleWords.includes(skill) ||
                (transformedData.description &&
                  transformedData.description.toLowerCase().includes(skill))
            );

            transformedData.skills = detectedSkills.length > 0 ? detectedSkills : ["javascript"]; // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –Ω–∞–≤—ã–∫, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
          }

          const existingVacancy = await Vacancy.findOne({
            externalId: transformedData.externalId,
            source: SOURCE_HH,
          });

          if (!existingVacancy) {
            await Vacancy.create(transformedData);
            pageNew++;
            console.log(`  ‚ú® –ù–û–í–ê–Ø: "${transformedData.title}" (ID: ${transformedData.externalId})`);
          } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            const updateResult = await Vacancy.updateOne(
              { _id: existingVacancy._id },
              {
                ...transformedData,
                updatedAt: new Date() // –î–æ–±–∞–≤–ª—è–µ–º timestamp –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
              }
            );

            if (updateResult.modifiedCount > 0) {
              pageUpdated++;
              console.log(`  üîÑ –û–ë–ù–û–í–õ–ï–ù–ê: "${transformedData.title}" (ID: ${transformedData.externalId})`);
            } else {
              // –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
              console.log(`  ‚ö™ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô: "${transformedData.title}" (ID: ${transformedData.externalId})`);
            }
          }
        }

        totalNew += pageNew;
        totalUpdated += pageUpdated;
        totalSkipped += pageSkipped;

        console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏—Ç–æ–≥: ‚ú®${pageNew} –Ω–æ–≤—ã—Ö, üîÑ${pageUpdated} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, ‚ö™${receivedCount - pageNew - pageUpdated - pageSkipped} –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, ‚ùå${pageSkipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ`);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
        if (page < MAX_PAGES_TO_FETCH - 1) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page + 1}:`, error);
        if (error instanceof HTTPError) {
          const errorBody = await error.response.text();
          console.error(
            `üìã –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ (${error.response.status}):`,
            errorBody.slice(0, 500)
          );
        }
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
      }
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const finalCount = await Vacancy.countDocuments();
    console.log("\nüéØ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê INCREMENTAL UPDATE:");
    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç API: ${totalReceived}`);
    console.log(`‚ú® –ù–æ–≤—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${totalNew}`);
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: ${totalUpdated}`);
    console.log(`‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ (–æ—à–∏–±–∫–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏): ${totalSkipped}`);
    console.log(`üìã –ë—ã–ª–æ –≤ –ë–î: ${initialCount} ‚Üí –°—Ç–∞–ª–æ: ${finalCount} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: +${finalCount - initialCount})`);
    console.log(`üéâ Merge –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –î—É–±–ª–∏–∫–∞—Ç—ã –∏—Å–∫–ª—é—á–µ–Ω—ã.`);

  } catch (error) {
    console.error("üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:", error);
  } finally {
    if (connection) {
      // mongoose —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
      await mongoose.disconnect();
      console.log("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ");
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ –∫–∞–∫ CLI —Å–∫—Ä–∏–ø—Ç
if (import.meta.url === `file://${process.argv[1]}`) {
  fetchAndSaveHHVacancies();
}

export default fetchAndSaveHHVacancies;
