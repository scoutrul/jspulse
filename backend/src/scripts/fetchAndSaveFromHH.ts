import mongoose from "../config/database.js";
import ky, { HTTPError } from "ky";
import { transformHHVacancyToIVacancy, transformHHVacancyWithFullDescription } from "../utils/transformations.js";
import { normalizeSkill } from "../utils/transformations.js";
import { containsBackendStopWords } from "../config/backendStopWords.js";
import { EarlyExitStrategy } from "../utils/parsing/earlyExitStrategy.js";
import type { HHResponseRaw } from "@jspulse/shared";
import dotenv from "dotenv";
dotenv.config();
import { HH_API_BASE_URL } from "../config/api.js";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö
async function getVacancyModel() {
  // mongoose —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω

  const vacancySchema = new mongoose.Schema(
    {
      externalId: { type: String, unique: true, sparse: true },
      title: { type: String, required: true },
      company: { type: String, required: true },
      location: { type: String },
      url: { type: String, required: true },
      publishedAt: { type: Date, required: true },
      source: { type: String, required: true },
      description: { type: String },
      fullDescription: {
        type: {
          raw: { type: String },
          preview: { type: String },
          processed: { type: String },
          textOnly: { type: String }
        },
        default: undefined
      },
      processedHtml: { type: String },
      schedule: { type: String },
      skills: [{ type: String }],
      salaryFrom: { type: Number },
      salaryTo: { type: Number },
      salaryCurrency: { type: String },
      experience: { type: String },
      employment: { type: String },
      address: { type: String },

      sourceId: { type: String, unique: true, sparse: true },
      sourceChannel: { type: String },
      sourceUrl: { type: String },
      contact: { type: String },
      workFormat: { type: String },
      hashtags: [{ type: String }],
      confidence: { type: Number },
      parsedAt: { type: Date },

      rawData: { type: mongoose.Schema.Types.Mixed },
    },
    {
      timestamps: true,
      versionKey: false,
      collection: "vacancies",
    }
  );

  vacancySchema.index({ publishedAt: -1 });

  return mongoose.model("Vacancy", vacancySchema);
}

const SOURCE_HH = "hh.ru";
const MAX_VACANCIES_PER_PAGE = 10; // HH API limit
const MAX_PAGES_TO_FETCH = 50; // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 50 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 500 –≤–∞–∫–∞–Ω—Å–∏–π
const START_PAGE = parseInt(process.env.START_PAGE || "0", 10); // –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ START_PAGE=20)
const SEARCH_TEXT = "JavaScript Developer OR Frontend Developer";
const FETCH_FULL_DESCRIPTIONS = process.env.FETCH_FULL_DESCRIPTIONS !== "false"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –í–ö–õ–Æ–ß–ï–ù–û, –º–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ false

async function fetchAndSaveHHVacancies() {
  console.log("üöÄ –ó–∞–ø—É—Å–∫–∞—é incremental –∏–º–ø–æ—Ä—Ç –≤–∞–∫–∞–Ω—Å–∏–π —Å HeadHunter...");
  console.log(`üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏: —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${START_PAGE + 1}-${START_PAGE + MAX_PAGES_TO_FETCH} (${MAX_PAGES_TO_FETCH} —Å—Ç—Ä–∞–Ω–∏—Ü) √ó ${MAX_VACANCIES_PER_PAGE} = –¥–æ ${MAX_PAGES_TO_FETCH * MAX_VACANCIES_PER_PAGE} –≤–∞–∫–∞–Ω—Å–∏–π`);
  console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π: ${FETCH_FULL_DESCRIPTIONS ? '–í–ö–õ–Æ–ß–ï–ù–û' : '–í–´–ö–õ–Æ–ß–ï–ù–û'}`);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º MongoDB –≤–Ω—É—Ç—Ä–∏ Docker —Å–µ—Ç–∏
  const mongoUrl = process.env.MONGO_URI || "mongodb://mongodb:27017/jspulse";

  let connection;
  try {
    // mongoose —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
    connection = await mongoose.connect(mongoUrl);
    console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB");

    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    const Vacancy = await getVacancyModel();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î
    const initialCount = await Vacancy.countDocuments();
    console.log(`üìã –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –≤ –ë–î: ${initialCount}`);

    let totalReceived = 0;
    let totalNew = 0;
    let totalUpdated = 0;
    let totalSkipped = 0;

    for (let page = START_PAGE; page < START_PAGE + MAX_PAGES_TO_FETCH; page++) {
      const searchParams = {
        text: SEARCH_TEXT,
        area: "1", // –ú–æ—Å–∫–≤–∞
        per_page: String(MAX_VACANCIES_PER_PAGE),
        page: String(page),
        professional_role: "96", // –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
      };

      console.log(
        `üìÑ –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page + 1}/${START_PAGE + MAX_PAGES_TO_FETCH} —Å ${HH_API_BASE_URL}...`
      );

      try {
        const data = await ky
          .get(HH_API_BASE_URL + "/vacancies", {
            searchParams: searchParams,
            headers: {
              "User-Agent": "JSPulse",
              "HH-User-Agent": "JSPulse",
            },
            timeout: 30000,
          })
          .json<HHResponseRaw>();

        if (!data.items) {
          console.error(`‚ùå –û—à–∏–±–∫–∞: –û—Ç–≤–µ—Ç –æ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'items'. –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:`, data);
          return;
        }

        const receivedCount = data.items.length;
        console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1}: –ü–æ–ª—É—á–µ–Ω–æ ${receivedCount} –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç HH API`);
        totalReceived += receivedCount;

        if (receivedCount === 0) {
          console.log("üèÅ –ë–æ–ª—å—à–µ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º.");
          break;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞–Ω–Ω–µ–≥–æ –≤—ã—Ö–æ–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const result = await EarlyExitStrategy.processPage(
          data.items,
          // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
          async (hhVacancy) => {
            const transformedData = transformHHVacancyToIVacancy(hhVacancy);
            if (!transformedData) return true; // –°—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫—É —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–∞–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é

            const existingVacancy = await Vacancy.findOne({
              externalId: transformedData.externalId,
              source: SOURCE_HH,
            });
            return !!existingVacancy;
          },
          // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
          async (hhVacancy) => {
            let transformedData;

            try {
              if (FETCH_FULL_DESCRIPTIONS) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
                transformedData = await transformHHVacancyWithFullDescription(hhVacancy, true);
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ –¥–µ—Ç–∞–ª—è–º –≤–∞–∫–∞–Ω—Å–∏–π (–¥–∂–∏—Ç—Ç–µ—Ä)
                const jitter = 200 + Math.floor(Math.random() * 400);
                await new Promise(resolve => setTimeout(resolve, jitter));
              } else {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
                transformedData = transformHHVacancyToIVacancy(hhVacancy);
              }
            } catch (err: any) {
              const msg = String(err?.message || err || '');
              console.warn(`‚è≥ HH detail fetch failed, fallback to basic transform: ${msg}`);
              // Fallback –Ω–∞ –±–∞–∑–æ–≤—É—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
              transformedData = transformHHVacancyToIVacancy(hhVacancy);
              // –ë—ç–∫-–æ—Ñ—Ñ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–¥–∂–∏—Ç—Ç–µ—Ä)
              const backoff = 600 + Math.floor(Math.random() * 900);
              await new Promise(r => setTimeout(r, backoff));
            }

            if (!transformedData) {
              throw new Error('–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –¥–ª—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –±—ç–∫–µ–Ω–¥–∞ (–∫—Ä–æ–º–µ Node.js)
            const vacancyText = `${transformedData.title} ${transformedData.description || ''}`.toLowerCase();
            if (containsBackendStopWords(vacancyText)) {
              console.log(`  üö´ –ü–†–û–ü–£–©–ï–ù–ê (—Å—Ç–æ–ø-—Å–ª–æ–≤–∞): "${transformedData.title}"`);
              throw new Error('–í–∞–∫–∞–Ω—Å–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–æ–ø-—Å–ª–æ–≤–∞');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å skills –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            if (
              !transformedData.skills ||
              !Array.isArray(transformedData.skills) ||
              transformedData.skills.length === 0
            ) {
              // –ï—Å–ª–∏ –Ω–∞–≤—ã–∫–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –±–∞–∑–æ–≤—ã–π –Ω–∞–≤—ã–∫ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
              const titleWords = transformedData.title.toLowerCase().split(/\W+/);
              const possibleSkills = [
                "javascript", "js", "typescript", "ts",
                "react", "reactjs", "react.js", "nextjs", "next.js",
                "redux", "redux-toolkit", "redux toolkit",
                "vue", "vuejs", "vue.js", "vuex", "pinia", "nuxt", "nuxtjs", "nuxt.js",
                "angular", "rxjs",
                "svelte", "sveltekit",
                "webpack", "vite", "babel", "eslint", "prettier",
                "jest", "vitest", "testing-library", "testing library", "cypress", "playwright", "storybook",
                "tailwind", "tailwindcss", "scss", "sass", "styled-components", "styled components", "emotion",
                "graphql", "apollo",
                "three.js", "threejs", "d3", "chart.js", "chartjs", "webgl", "pwa", "service worker",
                "html", "html5", "css", "css3",
                "frontend", "backend"
              ];
              const detectedSkills = possibleSkills.filter(
                (skill) =>
                  titleWords.includes(skill) ||
                  (transformedData.description &&
                    transformedData.description.toLowerCase().includes(skill))
              ).map(normalizeSkill);

              transformedData.skills = detectedSkills.length > 0 ? detectedSkills : ["javascript"]; // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –Ω–∞–≤—ã–∫, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é
            await Vacancy.create(transformedData);
            console.log(`  ‚ú® –ù–û–í–ê–Ø: "${transformedData.title}" (ID: ${transformedData.externalId})`);
          },
          {
            minNewItems: 1, // –ú–∏–Ω–∏–º—É–º 1 –Ω–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
            maxExistingRatio: 1.0, // –ú–∞–∫—Å–∏–º—É–º 100% —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
            verbose: true
          }
        );

        totalNew += result.newCount;
        totalUpdated += result.existingCount; // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ
        totalSkipped += result.totalCount - result.newCount - result.existingCount;

        console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏—Ç–æ–≥: ‚ú®${result.newCount} –Ω–æ–≤—ã—Ö, üîÑ${result.existingCount} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, ‚ùå${result.totalCount - result.newCount - result.existingCount} –ø—Ä–æ–ø—É—â–µ–Ω–æ`);

        // –ï—Å–ª–∏ –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        if (!result.shouldContinue) {
          console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${result.stopReason}`);
          break;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
        await new Promise(resolve => setTimeout(resolve, 500));
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page + 1}:`, error);
        if (error instanceof HTTPError) {
          console.error(`üìã –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (${error.response.status}):`, await error.response.text());
        }
      }
    }

    console.log("\nüéØ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê INCREMENTAL UPDATE:");
    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç API: ${totalReceived}`);
    console.log(`‚ú® –ù–æ–≤—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${totalNew}`);
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: ${totalUpdated}`);
    console.log(`‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ (–æ—à–∏–±–∫–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏): ${totalSkipped}`);

    const finalCount = await Vacancy.countDocuments();
    console.log(`üìã –ë—ã–ª–æ –≤ –ë–î: ${initialCount} ‚Üí –°—Ç–∞–ª–æ: ${finalCount} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: +${finalCount - initialCount})`);
    console.log("üéâ Merge –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –î—É–±–ª–∏–∫–∞—Ç—ã –∏—Å–∫–ª—é—á–µ–Ω—ã.");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–º–ø–æ—Ä—Ç–∞:", error);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect();
      console.log("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ");
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
fetchAndSaveHHVacancies();
