import { config } from 'dotenv';
import { connectDB } from '../config/database.js';
import { VacancyRepository } from '../repositories/VacancyRepository.js';
import { TelegramParserService } from '../services/TelegramParserService.js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TelegramParserService —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */
async function testTelegramParserService(): Promise<void> {
  console.log('üöÄ Starting TelegramParserService test with database integration...');

  try {
    // 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìã Step 1: Connecting to database...');
    await connectDB();
    console.log('‚úÖ Connected to MongoDB');

    // 2. –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ —Å–µ—Ä–≤–∏—Å
    console.log('\nüìã Step 2: Initializing services...');
    const vacancyRepository = new VacancyRepository();
    const telegramParserService = new TelegramParserService(vacancyRepository);
    console.log('‚úÖ Services initialized');

    // 3. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    console.log('\nüìã Step 3: Getting statistics before parsing...');
    const statsBefore = await telegramParserService.getParsingStats();
    console.log('üìä Statistics before parsing:');
    console.log(`  üìù Total vacancies: ${statsBefore.totalVacancies}`);
    console.log(`  ü§ñ Telegram vacancies: ${statsBefore.telegramVacancies}`);
    console.log('  üìä Channel breakdown:');
    statsBefore.channelBreakdown.forEach(channel => {
      console.log(`    - ${channel.channel}: ${channel.count} vacancies`);
    });

    // 4. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    console.log('\nüìã Step 4: Running Telegram parsing...');
    const parseResults = await telegramParserService.parseAllChannels();

    // 5. –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
    console.log('\nüìä PARSING RESULTS:');
    console.log(`üìù Total messages processed: ${parseResults.totalProcessed}`);
    console.log(`üíæ Total vacancies saved: ${parseResults.totalSaved}`);
    console.log(`üìà Success rate: ${parseResults.totalProcessed > 0 ? (parseResults.totalSaved / parseResults.totalProcessed * 100).toFixed(1) : 0}%`);

    // –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º
    console.log('\nüìã Channel-by-channel results:');
    parseResults.channels.forEach(channel => {
      console.log(`\nüîç Channel: ${channel.channel}`);
      console.log(`  üìù Processed: ${channel.processed} messages`);
      console.log(`  üíæ Saved: ${channel.saved} vacancies`);
      if (channel.errors.length > 0) {
        console.log(`  ‚ùå Errors: ${channel.errors.length}`);
        channel.errors.forEach((error, index) => {
          console.log(`    ${index + 1}. ${error}`);
        });
      }
    });

    // 6. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
    console.log('\nüìã Step 6: Getting statistics after parsing...');
    const statsAfter = await telegramParserService.getParsingStats();
    console.log('\nüìä Statistics after parsing:');
    console.log(`  üìù Total vacancies: ${statsAfter.totalVacancies}`);
    console.log(`  ü§ñ Telegram vacancies: ${statsAfter.telegramVacancies}`);
    console.log('  üìä Channel breakdown:');
    statsAfter.channelBreakdown.forEach(channel => {
      console.log(`    - ${channel.channel}: ${channel.count} vacancies`);
    });

    // 7. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüìà COMPARISON:');
    const totalDiff = statsAfter.totalVacancies - statsBefore.totalVacancies;
    const telegramDiff = statsAfter.telegramVacancies - statsBefore.telegramVacancies;
    console.log(`  üìù Total vacancies change: +${totalDiff}`);
    console.log(`  ü§ñ Telegram vacancies change: +${telegramDiff}`);

    // 8. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    console.log('\nüìã Step 8: Showing latest added vacancies...');
    const latestVacancies = await vacancyRepository.findMany({
      where: { source: 'telegram' },
      limit: 3
    });

    if (latestVacancies.data.length > 0) {
      console.log('\nüÜï Latest added Telegram vacancies:');
      latestVacancies.data.forEach((vacancy, index) => {
        console.log(`\n${index + 1}. üìã ${vacancy.title}`);
        console.log(`   üè¢ Company: ${vacancy.company}`);
        console.log(`   üí∞ Salary: ${vacancy.salaryFrom || '?'}-${vacancy.salaryTo || '?'} ${vacancy.salaryCurrency || 'RUB'}`);
        console.log(`   üìç Location: ${vacancy.location}`);
        console.log(`   üõ†Ô∏è Skills: ${vacancy.skills.join(', ') || 'None'}`);
        console.log(`   üì∫ Channel: ${vacancy.sourceChannel || 'Unknown'}`);
        console.log(`   üë§ Contact: ${vacancy.contact || 'None'}`);
        console.log(`   üìä Confidence: ${vacancy.confidence ? (vacancy.confidence * 100).toFixed(1) + '%' : 'Unknown'}`);
        console.log(`   üïê Parsed at: ${vacancy.parsedAt ? vacancy.parsedAt.toLocaleString() : 'Unknown'}`);
      });
    } else {
      console.log('‚ö†Ô∏è No Telegram vacancies found in database');
    }

    console.log('\n‚úÖ TelegramParserService test completed successfully!');

  } catch (error) {
    console.error('‚ùå Test failed:', error);
    throw error;
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  testTelegramParserService()
    .then(() => {
      console.log('\nüèÅ TelegramParserService test completed');
    })
    .catch((error) => {
      console.error('\nüí• Test failed:', error);
      process.exit(1);
    });
} 