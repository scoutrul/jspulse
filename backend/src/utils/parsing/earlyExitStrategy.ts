/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–Ω–Ω–µ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 * 
 * –õ–æ–≥–∏–∫–∞: –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤—Å–µ–≥–¥–∞ –ø–æ—è–≤–ª—è—é—Ç—Å—è —Å–≤–µ—Ä—Ö—É —Å–ø–∏—Å–∫–∞, –ø–æ—ç—Ç–æ–º—É –µ—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ, –∑–Ω–∞—á–∏—Ç –º—ã –¥–æ—à–ª–∏ –¥–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * –∏ –¥–∞–ª—å–Ω–µ–π—à–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞.
 */

export interface ParsingResult {
  /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */
  newCount: number;
  /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */
  existingCount: number;
  /** –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ */
  totalCount: number;
  /** –°–ª–µ–¥—É–µ—Ç –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ */
  shouldContinue: boolean;
  /** –ü—Ä–∏—á–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–µ—Å–ª–∏ shouldContinue = false) */
  stopReason?: string;
}

export interface EarlyExitOptions {
  /** –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ */
  minNewItems?: number;
  /** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (0-1) */
  maxExistingRatio?: number;
  /** –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ */
  verbose?: boolean;
}

export class EarlyExitStrategy {
  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Ä–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥
   * 
   * @param items - –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
   * @param checkExists - —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
   * @param processNew - —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
   * @param options - –æ–ø—Ü–∏–∏ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—ã—Ö–æ–¥–∞
   * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  static async processPage<T>(
    items: T[],
    checkExists: (item: T) => Promise<boolean>,
    processNew: (item: T) => Promise<void>,
    options: EarlyExitOptions = {}
  ): Promise<ParsingResult> {
    const {
      minNewItems = 1,
      maxExistingRatio = 1.0,
      verbose = false
    } = options;

    let newCount = 0;
    let existingCount = 0;
    const totalCount = items.length;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
    for (const item of items) {
      try {
        const exists = await checkExists(item);

        if (exists) {
          existingCount++;
          if (verbose) {
            console.log(`  ‚ö™ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ–ø—É—â–µ–Ω`);
          }
        } else {
          await processNew(item);
          newCount++;
          if (verbose) {
            console.log(`  ‚ú® –ù–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
          }
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞:`, error);
        // –°—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫—É –∫–∞–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
        existingCount++;
      }
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const existingRatio = totalCount > 0 ? existingCount / totalCount : 0;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥
    const shouldContinue = newCount >= minNewItems && existingRatio <= maxExistingRatio;

    let stopReason: string | undefined;
    if (!shouldContinue) {
      if (newCount < minNewItems) {
        stopReason = `—Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (${newCount} < ${minNewItems})`;
      } else if (existingRatio > maxExistingRatio) {
        stopReason = `—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (${(existingRatio * 100).toFixed(1)}% > ${(maxExistingRatio * 100).toFixed(1)}%)`;
      }
    }

    const result: ParsingResult = {
      newCount,
      existingCount,
      totalCount,
      shouldContinue,
      stopReason
    };

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (verbose || !shouldContinue) {
      console.log(`üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${newCount} –Ω–æ–≤—ã—Ö, ${existingCount} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö, ${totalCount} –≤—Å–µ–≥–æ`);
      if (!shouldContinue) {
        console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${stopReason}`);
      }
    }

    return result;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –≤–Ω–µ—à–Ω–µ–º—É ID
   * 
   * @param repository - —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤–∞–∫–∞–Ω—Å–∏–π
   * @param source - –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–∞–∫–∞–Ω—Å–∏–∏
   * @returns —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
   */
  static createVacancyExistsChecker(
    repository: any,
    source: string
  ) {
    return async (vacancy: { id: string | number }): Promise<boolean> => {
      try {
        const externalId = `${source}:${vacancy.id}`;
        const existing = await repository.findByExternalId(externalId);
        return !!existing;
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${vacancy.id}:`, error);
        return false;
      }
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
   * 
   * @param repository - —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤–∞–∫–∞–Ω—Å–∏–π
   * @param transformer - —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
   * @param source - –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–∞–∫–∞–Ω—Å–∏–∏
   * @returns —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
   */
  static createVacancyProcessor(
    repository: any,
    transformer: (vacancy: any) => any,
    source: string
  ) {
    return async (vacancy: any): Promise<void> => {
      try {
        const transformedData = transformer(vacancy);
        const externalId = `${source}:${vacancy.id}`;
        transformedData.externalId = externalId;
        transformedData.source = source;

        await repository.create(transformedData);
        console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è: "${transformedData.title}" (${source})`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${vacancy.id}:`, error);
        throw error;
      }
    };
  }
}
