import { Router, Request, Response } from 'express';
import { DIContainer } from '../container/DIContainer.js';
import { SchedulerService } from '../services/SchedulerService.js';

const container = new DIContainer();

/**
 * üï∞Ô∏è Scheduler Management API Routes
 * 
 * Endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á:
 * - GET /status - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
 * - POST /jobs/:jobId/run - —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏
 * - PUT /jobs/:jobId/config - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏
 * - GET /health - health check scheduler'–∞
 */

const router: Router = Router();

// –ü–æ–ª—É—á–∞–µ–º SchedulerService –∏–∑ DI Container
const getSchedulerService = (): SchedulerService => {
  return container.resolve<SchedulerService>('schedulerService');
};

/**
 * üìä GET /api/scheduler/status
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
 */
router.get('/status', (req, res) => {
  try {
    const schedulerService = getSchedulerService();
    const jobsStatus = schedulerService.getJobsStatus();

    const response = {
      success: true,
      data: {
        summary: {
          totalJobs: jobsStatus.length,
          enabledJobs: jobsStatus.filter(job => job.enabled).length,
          runningJobs: jobsStatus.filter(job => job.running).length,
          totalRuns: jobsStatus.reduce((sum, job) => sum + job.runCount, 0),
          totalSuccesses: jobsStatus.reduce((sum, job) => sum + job.successCount, 0),
          totalErrors: jobsStatus.reduce((sum, job) => sum + job.errorCount, 0)
        },
        jobs: jobsStatus
      }
    };

    res.json(response);
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Failed to get scheduler status',
      details: error instanceof Error ? error.message : String(error)
    });
  }
});

/**
 * üéÆ POST /api/scheduler/jobs/:jobId/run
 * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
 */
router.post('/jobs/:jobId/run', async (req, res) => {
  try {
    const { jobId } = req.params;
    const schedulerService = getSchedulerService();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    schedulerService.runJobManually(jobId)
      .then(() => {
        console.log(`‚úÖ Manual job execution completed: ${jobId}`);
      })
      .catch((error) => {
        console.error(`‚ùå Manual job execution failed: ${jobId}`, error);
      });

    res.json({
      success: true,
      message: `Job ${jobId} started manually`,
      data: { jobId }
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Failed to run job manually',
      details: error instanceof Error ? error.message : String(error)
    });
  }
});

/**
 * ‚öôÔ∏è PUT /api/scheduler/jobs/:jobId/config
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ)
 */
router.put('/jobs/:jobId/config', (req, res) => {
  try {
    const { jobId } = req.params;
    const { schedule, enabled } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (schedule && typeof schedule !== 'string') {
      res.status(400).json({
        success: false,
        error: 'Schedule must be a valid cron string'
      });
      return;
    }

    if (enabled !== undefined && typeof enabled !== 'boolean') {
      res.status(400).json({
        success: false,
        error: 'Enabled must be a boolean'
      });
      return;
    }

    const schedulerService = getSchedulerService();
    const updates: { schedule?: string; enabled?: boolean } = {};

    if (schedule) updates.schedule = schedule;
    if (enabled !== undefined) updates.enabled = enabled;

    schedulerService.updateJobConfig(jobId, updates);

    res.json({
      success: true,
      message: `Job ${jobId} configuration updated`,
      data: { jobId, updates }
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Failed to update job configuration',
      details: error instanceof Error ? error.message : String(error)
    });
  }
});

/**
 * ‚ù§Ô∏è GET /api/scheduler/health
 * Health check scheduler'–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 */
router.get('/health', (req, res) => {
  try {
    const schedulerService = getSchedulerService();
    const jobsStatus = schedulerService.getJobsStatus();

    const now = new Date();
    const healthData = {
      status: 'healthy',
      timestamp: now.toISOString(),
      uptime: process.uptime(),
      jobs: {
        total: jobsStatus.length,
        enabled: jobsStatus.filter(job => job.enabled).length,
        running: jobsStatus.filter(job => job.running).length,
        recentFailures: jobsStatus.filter(job => {
          if (!job.lastError) return false;
          const timeDiff = now.getTime() - job.lastError.getTime();
          return timeDiff < 3600000; // –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        }).length
      },
      lastActivity: {
        mostRecentRun: jobsStatus
          .filter(job => job.lastRun)
          .sort((a, b) => (b.lastRun?.getTime() || 0) - (a.lastRun?.getTime() || 0))[0]?.lastRun,
        mostRecentSuccess: jobsStatus
          .filter(job => job.lastSuccess)
          .sort((a, b) => (b.lastSuccess?.getTime() || 0) - (a.lastSuccess?.getTime() || 0))[0]?.lastSuccess
      }
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
    if (healthData.jobs.recentFailures > 0) {
      healthData.status = 'warning';
    }

    if (healthData.jobs.running > 0 && healthData.jobs.enabled === 0) {
      healthData.status = 'unhealthy';
    }

    res.json({
      success: true,
      data: healthData
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Failed to get scheduler health',
      details: error instanceof Error ? error.message : String(error)
    });
  }
});

/**
 * üìù GET /api/scheduler/logs
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤ scheduler'–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
 */
router.get('/logs', (req, res) => {
  try {
    const { limit = 100 } = req.query;

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–∞–º—è—Ç–∏
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º placeholder
    res.json({
      success: true,
      data: {
        message: 'Log retrieval not implemented yet',
        suggestion: 'Check console output or implement file-based logging'
      }
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Failed to get scheduler logs',
      details: error instanceof Error ? error.message : String(error)
    });
  }
});

export default router; 