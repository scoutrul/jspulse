import mongoose from 'mongoose';
import { EarlyExitStrategy } from './dist/utils/parsing/earlyExitStrategy.js';

async function parseCareeredAPI() {
  const mongoUrl = process.env.MONGO_URI || 'mongodb://localhost:27017/jspulse';
  await mongoose.connect(mongoUrl);
  const db = mongoose.connection.db;
  const collection = db.collection('vacancies');

  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
  async function processVacancy(entry) {
    try {
      console.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥: ${entry.features.find(f => f.key === 'name')?.value || 'Unknown'}`);

      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
      const detailResponse = await fetch(`https://careered.io/api/jobs/${entry.id}`);
      const detailData = await detailResponse.json();

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ features
      const features = {};
      detailData.features.forEach(f => {
        features[f.key] = f.value;
      });

      const title = features.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
      const company = features.company || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è';
      const location = features.location || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
      const summary = features.summary || '';
      const content = detailData.content || '';
      const descriptionFull = content || summary || '';
      const preview = (features.summary || descriptionFull).slice(0, 500);

      // –î–æ–ø. –ø–æ–ª—è
      const experience = features.yoe ? String(features.yoe) : undefined;
      const employment = features.term ? String(features.term) : undefined; // fulltime/parttime/contract
      const salaryFrom = features.salary_from ? parseInt(features.salary_from) : undefined;
      const salaryTo = features.salary_to ? parseInt(features.salary_to) : undefined;
      const salaryCurrency = features.salary_currency || undefined;
      const salaryPeriod = features.salary_period || undefined; // month/hour
      const logoUrl = features.photo ? String(features.photo) : undefined;
      const tag = features.tag ? String(features.tag) : (detailData.tag?.name || undefined);
      const isBoosted = features.is_boosted === 'true';
      const isCrypto = features.crypto === 'true';
      const contact = (detailData.links || []).find(l => l.key === 'telegram' || l.key === 'mail')?.value || undefined;

      // –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
      const postedAt = new Date(detailData.posted_at * 1000);

      const doc = {
        externalId: `careered:${entry.id}`,
        title,
        company,
        location,
        url: `https://careered.io/jobs/${entry.id}`,
        publishedAt: postedAt,
        source: 'careered',
        description: preview,
        fullDescription: {
          raw: descriptionFull,
          preview,
          processed: descriptionFull,
          textOnly: descriptionFull
        },
        skills: [],
        salaryFrom,
        salaryTo,
        salaryCurrency,
        salaryPeriod,
        experience,
        employment,
        logoUrl,
        contact,
        hashtags: tag ? [tag] : [],
        isHighSalary: false,
        isRemote: location.toLowerCase().includes('remote') || location.toLowerCase().includes('—É–¥–∞–ª–µ–Ω–Ω'),
        createdAt: new Date(),
        updatedAt: new Date()
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
      await collection.updateOne(
        { externalId: doc.externalId, source: 'careered' },
        { $set: doc },
        { upsert: true }
      );

      console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${title} (${company})`);

      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(r => setTimeout(r, 80));

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${entry.id}:`, error.message);
      throw error;
    }
  }

  try {
    console.log('üîç –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ API...');

    const limit = Number(process.env.CAREERED_LIMIT || 100);
    let offset = 0;
    let total = 0;

    let saved = 0;
    let skipped = 0;

    while (true) {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π
      const url = `https://careered.io/api/jobs?tags=a7f11f28-d502-4b8f-8432-5a1862cc99fa&limit=${limit}&offset=${offset}`;
      const listResponse = await fetch(url);
      const listData = await listResponse.json();

      if (!Array.isArray(listData.entries) || listData.entries.length === 0) {
        console.log(`üì≠ –ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (offset=${offset}). –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Å—å.`);
        break;
      }

      total = listData.total ?? (offset + listData.entries.length);
      console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: offset=${offset}, –ø–æ–ª—É—á–µ–Ω–æ=${listData.entries.length}, –≤—Å–µ–≥–æ=${total}`);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞–Ω–Ω–µ–≥–æ –≤—ã—Ö–æ–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const result = await EarlyExitStrategy.processPage(
        listData.entries,
        // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
        async (entry) => {
          const existing = await collection.findOne({
            externalId: `careered:${entry.id}`,
            source: 'careered'
          });
          return !!existing;
        },
        // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
        async (entry) => {
          await processVacancy(entry);
        },
        {
          minNewItems: 1, // –ú–∏–Ω–∏–º—É–º 1 –Ω–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
          maxExistingRatio: 1.0, // –ú–∞–∫—Å–∏–º—É–º 100% —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
          verbose: true
        }
      );

      saved += result.newCount;
      skipped += result.totalCount - result.newCount - result.existingCount;

      console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: ‚ú®${result.newCount} –Ω–æ–≤—ã—Ö, üîÑ${result.existingCount} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, ‚ùå${result.totalCount - result.newCount - result.existingCount} –ø—Ä–æ–ø—É—â–µ–Ω–æ`);

      // –ï—Å–ª–∏ –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
      if (!result.shouldContinue) {
        console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${result.stopReason}`);
        break;
      }

      // –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      offset += limit;
    }

    console.log(`\nüéØ –ò–¢–û–ì:`);
    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${saved}`);
    console.log(`‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await mongoose.disconnect();
  }
}

parseCareeredAPI();
