#!/usr/bin/env node

// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ JSPulse

import http from 'http';

console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö JSPulse...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(url, method = 'GET') {
  return new Promise((resolve, reject) => {
    const req = http.request(url, { method }, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          const json = JSON.parse(data);
          resolve({ status: res.statusCode, data: json });
        } catch (e) {
          resolve({ status: res.statusCode, data });
        }
      });
    });
    
    req.on('error', reject);
    req.end();
  });
}

async function initializeData() {
  try {
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend...');
    const health = await makeRequest('http://localhost:3001/health');
    if (health.status !== 200) {
      throw new Error('Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    console.log('‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω');

    console.log('üîß –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ HeadHunter...');
    const parseResult = await makeRequest('http://localhost:3001/api/admin/parse-hh', 'POST');
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:', parseResult.data.message || parseResult.data);

    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (30 —Å–µ–∫—É–Ω–¥)...');
    await new Promise(resolve => setTimeout(resolve, 30000));

    console.log('üìà –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
    const vacancies = await makeRequest('http://localhost:3001/api/vacancies');
    const stats = await makeRequest('http://localhost:3001/api/admin/stats');
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`  - –í–∞–∫–∞–Ω—Å–∏–π –≤ API: ${vacancies.data?.meta?.totalItems || 0}`);
    console.log(`  - –í–∞–∫–∞–Ω—Å–∏–π –≤ –±–∞–∑–µ: ${stats.data?.data?.vacancies?.total || 0}`);
    
    if (vacancies.data?.meta?.totalItems > 0) {
      console.log('üéâ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
      console.log('üåê –§—Ä–æ–Ω—Ç–µ–Ω–¥: http://localhost:3000');
      console.log('üì± API: http://localhost:3001/api/vacancies');
    } else {
      console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏.');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message);
    process.exit(1);
  }
}

initializeData(); 