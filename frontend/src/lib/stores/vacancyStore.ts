import { writable, get } from 'svelte/store';
import type { VacancyWithHtml } from '@jspulse/shared';
import { PAGINATION } from '../config/pagination.constants';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ store
 */
interface VacancyState {
  vacancies: VacancyWithHtml[];
  total: number;
  page: number;
  limit: number;
  totalPages: number;
  selectedSkills: string[];
  loading: boolean;
  error: string | null;
  // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –≥–∏–±–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  availablePageSizes: number[];
  paginationMode: 'replace' | 'append'; // replace –¥–ª—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, append –¥–ª—è "load more"

  // –ü–æ–ª—è –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
  virtualWindow: {
    start: number; // –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–∏–¥–∏–º–æ–≥–æ –æ–∫–Ω–∞
    size: number;  // –†–∞–∑–º–µ—Ä –≤–∏–¥–∏–º–æ–≥–æ –æ–∫–Ω–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    totalLoaded: number; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  };
  canLoadPrevious: boolean; // –ú–æ–∂–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  previousPageHistory: Array<{ start: number; size: number }>; // –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞
}

const initialState: VacancyState = {
  vacancies: [],
  total: 0,
  page: 0,
  limit: PAGINATION.DEFAULT_PAGE_SIZE,
  totalPages: 0,
  selectedSkills: [],
  loading: false,
  error: null,
  availablePageSizes: [10, 20, 30, 50], // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
  paginationMode: 'replace',
  virtualWindow: {
    start: 0,
    size: 0,
    totalLoaded: 0
  },
  canLoadPrevious: false,
  previousPageHistory: []
};

/**
 * –°–æ–∑–¥–∞–µ—Ç store –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≤–∞–∫–∞–Ω—Å–∏–π
 */
function createVacancyStore() {
  const { subscribe, set, update } = writable<VacancyState>(initialState);

  const store = {
    subscribe,

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (—Å–±—Ä–æ—Å)
    init: (data: Partial<VacancyState>) => update(state => {
      return { ...state, ...data };
    }),

    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–≤—ã–∫–∞–º
    setSkills: (skills: string[]) => update(state => ({
      ...state,
      selectedSkills: skills,
      page: 0,
      vacancies: []
    })),

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ (–ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
    setVacancies: (vacancies: VacancyWithHtml[], total: number, totalPages: number, page: number) =>
      update(state => ({ ...state, vacancies, total, totalPages, page })),

    // –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
    appendVacancies: (newVacancies: VacancyWithHtml[], total: number, totalPages: number, page: number) =>
      update(state => {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ _id –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏ each_key_duplicate –≤ Svelte
        const existingIds = new Set(state.vacancies.map(v => v._id));
        const uniqueNewVacancies = newVacancies.filter(v => !existingIds.has(v._id));

        return {
          ...state,
          vacancies: [...state.vacancies, ...uniqueNewVacancies],
          total,
          totalPages,
          page
        };
      }),

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    setLoading: (loading: boolean) => update(state => ({ ...state, loading })),

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
    setError: (error: string | null) => update(state => ({ ...state, error })),

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    reset: () => set({
      ...initialState,
      virtualWindow: {
        start: 0,
        size: 0,
        totalLoaded: 0
      },
      canLoadPrevious: false,
      previousPageHistory: []
    }),

    // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≥–∏–±–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–∑–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏)
    goToPage: (page: number) => update(state => ({
      ...state,
      page,
      paginationMode: 'replace'
    })),

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setPageSize: (limit: number) => update(state => {
      // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      // —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–µ –∂–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      const currentFirstItem = state.page * state.limit;
      const newPage = Math.floor(currentFirstItem / limit);
      const newTotalPages = Math.ceil(state.total / limit);

      return {
        ...state,
        limit,
        page: Math.min(newPage, Math.max(0, newTotalPages - 1)),
        totalPages: newTotalPages,
        paginationMode: 'replace'
      };
    }),

    // –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è "–ø–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
    increasePageSize: () => update(state => {
      let newLimit = state.limit;

      if (newLimit < PAGINATION.PROGRESSIVE_STEPS.STEP_2) {
        newLimit = PAGINATION.PROGRESSIVE_STEPS.STEP_2; // 10 -> 20
      } else if (newLimit < PAGINATION.PROGRESSIVE_STEPS.STEP_3) {
        newLimit = PAGINATION.PROGRESSIVE_STEPS.STEP_3; // 20 -> 30
      } else if (newLimit < PAGINATION.PROGRESSIVE_STEPS.STEP_4) {
        newLimit = PAGINATION.PROGRESSIVE_STEPS.STEP_4; // 30 -> 50
      } else {
        // –ë–æ–ª—å—à–µ 50 –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º, —ç—Ç–æ –º–∞–∫—Å–∏–º—É–º
        newLimit = PAGINATION.PROGRESSIVE_STEPS.STEP_4; // –º–∞–∫—Å–∏–º—É–º 50
      }

      const newTotalPages = Math.ceil(state.total / newLimit);

      return {
        ...state,
        limit: newLimit,
        totalPages: newTotalPages,
        page: 0, // –°–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        paginationMode: 'replace'
      };
    }),

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (offset-based –ø–∞–≥–∏–Ω–∞—Ü–∏—è)
    goToNextPage: () => update(state => {
      const nextPage = state.page + 1;
      const maxPage = Math.ceil(state.total / state.limit) - 1;

      return {
        ...state,
        page: Math.min(nextPage, maxPage),
        paginationMode: 'replace'
      };
    }),

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ offset-based –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ 50 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    isOffsetMode: () => {
      const currentState = get({ subscribe });
      return currentState.limit >= 50 && currentState.total > 50;
    },

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    setPaginationMode: (mode: 'replace' | 'append') => update(state => ({
      ...state,
      paginationMode: mode
    })),



    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    syncWithURL: (searchParams: URLSearchParams) => update(state => {
      const page = parseInt(searchParams.get('page') || '0');
      const limit = parseInt(searchParams.get('limit') || state.limit.toString());
      const skills = searchParams.get('skills')?.split(',').filter(Boolean) || [];

      return {
        ...state,
        page: Math.max(0, page),
        limit: state.availablePageSizes.includes(limit) ? limit : state.limit,
        selectedSkills: skills,
        paginationMode: 'replace'
      };
    }),

    // –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è URL
    getURLParams: (): string => {
      const currentState = get({ subscribe });
      const params = new URLSearchParams();

      if (currentState.page > 0) {
        params.set('page', currentState.page.toString());
      }

      if (currentState.limit !== PAGINATION.DEFAULT_PAGE_SIZE) {
        params.set('limit', currentState.limit.toString());
      }

      if (currentState.selectedSkills.length > 0) {
        params.set('skills', currentState.selectedSkills.join(','));
      }

      return params.toString();
    },

    // üöÄ –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏

    // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
    appendVacanciesVirtual: (newVacancies: VacancyWithHtml[], total: number) =>
      update(state => {
        const currentLoaded = state.vacancies.length;

        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ _id –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏ each_key_duplicate –≤ Svelte
        const existingIds = new Set(state.vacancies.map(v => v._id));
        const uniqueNewVacancies = newVacancies.filter(v => !existingIds.has(v._id));

        const newSize = uniqueNewVacancies.length;
        const maxWindowSize = 100; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

        // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–µ 50 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ —É–∂–µ –µ—Å—Ç—å –º–Ω–æ–≥–æ –≤ —Å–ø–∏—Å–∫–µ
        if (newSize >= 50 && currentLoaded >= 50) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫–∞—Ç–∞
          const historyEntry = {
            start: state.virtualWindow.start,
            size: state.virtualWindow.size
          };

          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–≤–µ—Ä—Ö—É (—Å—Ç–æ–ª—å–∫–æ –∂–µ —Å–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º)
          const updatedVacancies = [...state.vacancies.slice(newSize), ...uniqueNewVacancies];

          return {
            ...state,
            vacancies: updatedVacancies,
            total,
            virtualWindow: {
              start: state.virtualWindow.start + newSize,
              size: Math.min(updatedVacancies.length, maxWindowSize),
              totalLoaded: state.virtualWindow.totalLoaded + newSize
            },
            canLoadPrevious: true,
            previousPageHistory: [...state.previousPageHistory, historyEntry]
          };
        } else {
          // –û–±—ã—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –ø–æ—Ä—Ü–∏–π
          return {
            ...state,
            vacancies: [...state.vacancies, ...uniqueNewVacancies],
            total,
            virtualWindow: {
              start: state.virtualWindow.start,
              size: state.vacancies.length + newSize,
              totalLoaded: state.virtualWindow.totalLoaded + newSize
            }
          };
        }
      }),

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–æ—Ç–∫–∞—Ç)
    loadPreviousVirtual: () =>
      update(state => {
        if (!state.canLoadPrevious || state.previousPageHistory.length === 0) {
          return state;
        }

        const lastHistory = state.previousPageHistory[state.previousPageHistory.length - 1];
        const newHistory = state.previousPageHistory.slice(0, -1);

        return {
          ...state,
          virtualWindow: {
            start: lastHistory.start,
            size: lastHistory.size,
            totalLoaded: state.virtualWindow.totalLoaded
          },
          canLoadPrevious: newHistory.length > 0,
          previousPageHistory: newHistory
        };
      }),

    // –°–±—Ä–æ—Å –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–∏—Å–∫–µ)
    resetVirtual: () =>
      update(state => ({
        ...state,
        vacancies: [],
        virtualWindow: {
          start: 0,
          size: 0,
          totalLoaded: 0
        },
        canLoadPrevious: false,
        previousPageHistory: []
      })),

    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    getVirtualInfo: () => {
      const currentState = get({ subscribe });
      return {
        showing: currentState.vacancies.length,
        windowStart: currentState.virtualWindow.start,
        windowEnd: currentState.virtualWindow.start + currentState.vacancies.length,
        totalLoaded: currentState.virtualWindow.totalLoaded,
        canLoadPrevious: currentState.canLoadPrevious,
        hiddenItemsCount: currentState.virtualWindow.start
      };
    }
  };

  return store;
}

export const vacancyStore = createVacancyStore(); 