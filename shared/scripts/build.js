import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import { execSync } from 'child_process';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.join(__dirname, '..');
const srcDir = path.join(rootDir, 'src');
const distDir = path.join(rootDir, 'dist');

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã TypeScript –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
 * @param {string} filePath - –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
 * @param {string} destPath - –ü—É—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
 */
async function processTypeScriptFile(filePath, destPath) {
  try {
    const content = await fs.readFile(filePath, 'utf8');
    const dtsPath = destPath.replace('.ts', '.d.ts');
    const jsPath = destPath.replace('.ts', '.js');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–º–ø–æ—Ä—Ç zod
    const hasZodImport = content.includes('import { z } from "zod"') || content.includes("from 'zod'");
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ñ–∞–π–ª —Å—Ö–µ–º—ã Zod
    const hasZodSchemas = content.includes('z.object') || 
                         content.includes('z.string') ||
                         content.includes('z.number') ||
                         content.includes('z.array') ||
                         content.includes('z.enum') ||
                         content.includes('z.preprocess');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ —Ç–∏–ø–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ z.infer
    const hasZodInferTypes = content.includes('z.infer<typeof');

    if (hasZodImport || hasZodSchemas) {
      // –î–ª—è —Ñ–∞–π–ª–æ–≤ —Å–æ —Å—Ö–µ–º–∞–º–∏ Zod —Å–æ–∑–¥–∞–µ–º JS —Ñ–∞–π–ª —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏
      console.log(`  ‚û§ –û–±—Ä–∞–±–æ—Ç–∫–∞ Zod-—Å—Ö–µ–º—ã: ${path.relative(rootDir, filePath)}`);
      
      // –°–æ–∑–¥–∞–µ–º .d.ts —Ñ–∞–π–ª –¥–ª—è —Ç–∏–ø–æ–≤
      await fs.writeFile(dtsPath, content);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ JS-—Ñ–∞–π–ª–µ
      let jsContent = content
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º–ø–æ—Ä—Ç—ã —Ç–∏–ø–æ–≤ –≤ –∏–º–ø–æ—Ä—Ç—ã –∑–Ω–∞—á–µ–Ω–∏–π
        .replace(/import\s+type\s+/g, 'import ')
        // –£–¥–∞–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤
        .replace(/:\s*[A-Za-z_][A-Za-z0-9_<>[\].|,\s]*(?=(\s*[=;,)]|\s*\{))/g, '')
        // –£–¥–∞–ª—è–µ–º generic –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        .replace(/<[^>]+>/g, '')
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å export type
        .replace(/export\s+type\s+.*?;/g, '')
        // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å z.infer –±–µ–∑ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
        .replace(/\s*z\.infer.*?;/g, '')
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö –∏–¥–µ—Ç z.infer;
        .replace(/\/\/.*\r?\n\s*z\.infer.*;/g, '');
        
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –≤ –ø–æ–ª—è—Ö —Å—Ö–µ–º
      if (jsContent.includes(',\n  }') || jsContent.includes('},\n}')) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è –±–µ–∑ —Ç–∏–ø–æ–≤
        jsContent = jsContent
          .replace(/(\w+)(,\s*[\r\n]\s*[})])/g, '$1: z.any()$2')
          .replace(/(\w+)(,\s*[\r\n])/g, '$1: z.any()$2');
      }
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–ª–µ–π –¥–∞—Ç
      if (path.basename(filePath) === 'vacancy.schema.ts') {
        // –ó–∞–º–µ–Ω—è–µ–º publishedAt: z.any() –Ω–∞ publishedAt: DateSchema
        jsContent = jsContent.replace(/publishedAt: z\.any\(\)/g, 'publishedAt: DateSchema');
      }
      
      // –£–¥–∞–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞
      jsContent = jsContent.replace(/\n+\s*$/, '\n');
        
      await fs.writeFile(jsPath, jsContent);
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Ç–∏–ø–æ–≤
      console.log(`  ‚û§ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤: ${path.relative(rootDir, filePath)}`);
      
      // –°–æ–∑–¥–∞–µ–º .d.ts —Ñ–∞–π–ª
      await fs.writeFile(dtsPath, content);
      
      // –°–æ–∑–¥–∞–µ–º .js —Ñ–∞–π–ª —Å –ø—É—Å—Ç—ã–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞–º–∏ –∏–ª–∏ —Å —ç–∫—Å–ø–æ—Ä—Ç–∞–º–∏ —Ç–∏–ø–æ–≤-–∑–∞–≥–ª—É—à–µ–∫
      const jsContent = generateJSStubsForTypes(content);
      await fs.writeFile(jsPath, jsContent);
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ TypeScript —Ñ–∞–π–ª–∞ ${filePath}:`, error);
    throw error;
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JavaScript-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ —Ç–∏–ø–æ–≤
 * @param {string} content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ TypeScript —Ñ–∞–π–ª–∞
 * @return {string} JavaScript-–∫–æ–¥ —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏
 */
function generateJSStubsForTypes(content) {
  let jsContent = '// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª\n';
  jsContent += '// –°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è TypeScript —Ç–∏–ø–æ–≤\n\n';
  
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ "export type" –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
  const contentWithoutExportTypes = content.replace(/export\s+type\s+.*?[;{]/g, '');
  
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–∫—Å–ø–æ—Ä—Ç—ã
  const exportMatches = contentWithoutExportTypes.match(/export\s+(interface|type|class|enum|const|function|let|var)\s+([a-zA-Z0-9_]+)/g);
  
  if (exportMatches) {
    const exports = exportMatches
      .map(exp => {
        const match = exp.match(/export\s+(interface|type|class|enum|const|function|let|var)\s+([a-zA-Z0-9_]+)/);
        if (match && match[2]) {
          const name = match[2];
          const kind = match[1];
          
          if (kind === 'interface' || kind === 'type') {
            return `export const ${name} = {}; // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è TypeScript ${kind}`;
          } else if (kind === 'enum') {
            return `export const ${name} = {}; // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è enum`;
          }
        }
        return null;
      })
      .filter(Boolean)
      .join('\n');
    
    jsContent += exports || 'export {};';
  } else {
    jsContent += 'export {};';
  }
  
  return jsContent;
}

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–ø–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π TypeScript —Ñ–∞–π–ª–æ–≤
 * @param {string} src - –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
 * @param {string} dest - –¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
 */
async function copyDirWithProcessing(src, dest) {
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await fs.mkdir(dest, { recursive: true });
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const entries = await fs.readdir(src, { withFileTypes: true });
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
    for (const entry of entries) {
      const srcPath = path.join(src, entry.name);
      const destPath = path.join(dest, entry.name);
      
      if (entry.isDirectory()) {
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        await copyDirWithProcessing(srcPath, destPath);
      } else if (entry.isFile()) {
        if (srcPath.endsWith('.ts')) {
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º TypeScript —Ñ–∞–π–ª
          await processTypeScriptFile(srcPath, destPath);
        } else {
          // –ü—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã
          await fs.copyFile(srcPath, destPath);
        }
      }
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${src}:`, error);
    throw error;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏
 */
async function build() {
  try {
    console.log('üì¶ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É @jspulse/shared...');
    
    // –û—á–∏—â–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é dist
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ dist...');
    await fs.rm(distDir, { recursive: true, force: true });
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    console.log('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...');
    await fs.mkdir(path.join(distDir, 'schemas'), { recursive: true });
    await fs.mkdir(path.join(distDir, 'types', 'core'), { recursive: true });
    await fs.mkdir(path.join(distDir, 'types', 'db'), { recursive: true });
    await fs.mkdir(path.join(distDir, 'types', 'dto'), { recursive: true });
    await fs.mkdir(path.join(distDir, 'types', 'sources'), { recursive: true });
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    console.log('üîÑ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ src –≤ dist —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π...');
    await copyDirWithProcessing(srcDir, distDir);
    
    console.log('‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç—ã
    const indexPath = path.join(distDir, 'index.js');
    if (await fs.stat(indexPath).catch(() => false)) {
      console.log('üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –≤ index.js...');
      let indexContent = await fs.readFile(indexPath, 'utf8');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ö–µ–º
      if (!indexContent.includes("export * from './schemas/index.js'")) {
        console.log('‚ö†Ô∏è –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç —Å—Ö–µ–º –≤ index.js');
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º index.js, –¥–æ–±–∞–≤–ª—è—è —ç–∫—Å–ø–æ—Ä—Ç —Å—Ö–µ–º
        if (indexContent.includes("export * from './types/index.js'")) {
          indexContent = indexContent.replace(
            "export * from './types/index.js';",
            "export * from './types/index.js';\n\n// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å—Ö–µ–º—ã –∏ –∏—Ö —Ç–∏–ø—ã –∏–∑ schemas\nexport * from './schemas/index.js';"
          );
          await fs.writeFile(indexPath, indexContent);
          console.log('‚úì –≠–∫—Å–ø–æ—Ä—Ç—ã —Å—Ö–µ–º –¥–æ–±–∞–≤–ª–µ–Ω—ã');
        } else {
          indexContent += "\n\n// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å—Ö–µ–º—ã –∏ –∏—Ö —Ç–∏–ø—ã –∏–∑ schemas\nexport * from './schemas/index.js';";
          await fs.writeFile(indexPath, indexContent);
          console.log('‚úì –≠–∫—Å–ø–æ—Ä—Ç—ã —Å—Ö–µ–º –¥–æ–±–∞–≤–ª–µ–Ω—ã');
        }
      } else {
        console.log('‚úì –≠–∫—Å–ø–æ—Ä—Ç—ã —Å—Ö–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É
build(); 